/*
 * generated by Xtext 2.16.0
 */
package nl.utwente.ewi.fmt.uppaalSMC.parser.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UppaalSMCGrammarAccess extends AbstractGrammarElementFinder {
	
	public class NSTAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.NSTA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVersion10Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEncodingUtf8Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDOCTYPEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cUppaalKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTeamDTDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cFlatKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSystemKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cENKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cHttpWwwItUuSeResearchGroupDartsUppaalFlat1_2DtdKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cGreaterThanSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cNtaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cGlobalDeclarationsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cGlobalDeclarationsGlobalDeclarationsParserRuleCall_14_0 = (RuleCall)cGlobalDeclarationsAssignment_14.eContents().get(0);
		private final Assignment cTemplateAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cTemplateTemplateParserRuleCall_15_0 = (RuleCall)cTemplateAssignment_15.eContents().get(0);
		private final Assignment cSystemDeclarationsAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cSystemDeclarationsSystemDeclarationsParserRuleCall_16_0 = (RuleCall)cSystemDeclarationsAssignment_16.eContents().get(0);
		private final RuleCall cQUERIESTerminalRuleCall_17 = (RuleCall)cGroup.eContents().get(17);
		private final Keyword cNtaKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//NSTA:
		//	'<?xml' 'version="1.0"' 'encoding="utf-8"?>'
		//	'<!DOCTYPE' name=ID ID "'-//Uppaal" "Team//DTD" "Flat" "System" "1.1//EN'"
		//	"'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'" '>'
		//	'<nta>'
		//	globalDeclarations=GlobalDeclarations?
		//	template+=Template*
		//	systemDeclarations=SystemDeclarations
		//	QUERIES?
		//	'</nta>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<?xml' 'version="1.0"' 'encoding="utf-8"?>' '<!DOCTYPE' name=ID ID "'-//Uppaal" "Team//DTD" "Flat" "System" "1.1//EN'"
		//"'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'" '>' '<nta>' globalDeclarations=GlobalDeclarations?
		//template+=Template* systemDeclarations=SystemDeclarations QUERIES? '</nta>'
		public Group getGroup() { return cGroup; }
		
		//'<?xml'
		public Keyword getXmlKeyword_0() { return cXmlKeyword_0; }
		
		//'version="1.0"'
		public Keyword getVersion10Keyword_1() { return cVersion10Keyword_1; }
		
		//'encoding="utf-8"?>'
		public Keyword getEncodingUtf8Keyword_2() { return cEncodingUtf8Keyword_2; }
		
		//'<!DOCTYPE'
		public Keyword getDOCTYPEKeyword_3() { return cDOCTYPEKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_5() { return cIDTerminalRuleCall_5; }
		
		//"'-//Uppaal"
		public Keyword getUppaalKeyword_6() { return cUppaalKeyword_6; }
		
		//"Team//DTD"
		public Keyword getTeamDTDKeyword_7() { return cTeamDTDKeyword_7; }
		
		//"Flat"
		public Keyword getFlatKeyword_8() { return cFlatKeyword_8; }
		
		//"System"
		public Keyword getSystemKeyword_9() { return cSystemKeyword_9; }
		
		//"1.1//EN'"
		public Keyword getENKeyword_10() { return cENKeyword_10; }
		
		//"'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'"
		public Keyword getHttpWwwItUuSeResearchGroupDartsUppaalFlat1_2DtdKeyword_11() { return cHttpWwwItUuSeResearchGroupDartsUppaalFlat1_2DtdKeyword_11; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_12() { return cGreaterThanSignKeyword_12; }
		
		//'<nta>'
		public Keyword getNtaKeyword_13() { return cNtaKeyword_13; }
		
		//globalDeclarations=GlobalDeclarations?
		public Assignment getGlobalDeclarationsAssignment_14() { return cGlobalDeclarationsAssignment_14; }
		
		//GlobalDeclarations
		public RuleCall getGlobalDeclarationsGlobalDeclarationsParserRuleCall_14_0() { return cGlobalDeclarationsGlobalDeclarationsParserRuleCall_14_0; }
		
		//template+=Template*
		public Assignment getTemplateAssignment_15() { return cTemplateAssignment_15; }
		
		//Template
		public RuleCall getTemplateTemplateParserRuleCall_15_0() { return cTemplateTemplateParserRuleCall_15_0; }
		
		//systemDeclarations=SystemDeclarations
		public Assignment getSystemDeclarationsAssignment_16() { return cSystemDeclarationsAssignment_16; }
		
		//SystemDeclarations
		public RuleCall getSystemDeclarationsSystemDeclarationsParserRuleCall_16_0() { return cSystemDeclarationsSystemDeclarationsParserRuleCall_16_0; }
		
		//QUERIES?
		public RuleCall getQUERIESTerminalRuleCall_17() { return cQUERIESTerminalRuleCall_17; }
		
		//'</nta>'
		public Keyword getNtaKeyword_18() { return cNtaKeyword_18; }
	}
	public class XmlAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.XmlAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//XmlAttribute:
		//	ID ('=' STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('=' STRING)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('=' STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}
	public class GlobalDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.GlobalDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final Assignment cChannelPriorityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChannelPriorityChannelPriorityParserRuleCall_3_0 = (RuleCall)cChannelPriorityAssignment_3.eContents().get(0);
		private final Assignment cDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationAssignment_4.eContents().get(0);
		private final Keyword cDeclarationKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GlobalDeclarations declarations::GlobalDeclarations:
		//	{declarations::GlobalDeclarations}
		//	'<declaration>'
		//	declaration+=Declaration*
		//	channelPriority=ChannelPriority?
		//	declaration+=Declaration*
		//	'</declaration>';
		@Override public ParserRule getRule() { return rule; }
		
		//{declarations::GlobalDeclarations} '<declaration>' declaration+=Declaration* channelPriority=ChannelPriority?
		//declaration+=Declaration* '</declaration>'
		public Group getGroup() { return cGroup; }
		
		//{declarations::GlobalDeclarations}
		public Action getGlobalDeclarationsAction_0() { return cGlobalDeclarationsAction_0; }
		
		//'<declaration>'
		public Keyword getDeclarationKeyword_1() { return cDeclarationKeyword_1; }
		
		//declaration+=Declaration*
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_2_0() { return cDeclarationDeclarationParserRuleCall_2_0; }
		
		//channelPriority=ChannelPriority?
		public Assignment getChannelPriorityAssignment_3() { return cChannelPriorityAssignment_3; }
		
		//ChannelPriority
		public RuleCall getChannelPriorityChannelPriorityParserRuleCall_3_0() { return cChannelPriorityChannelPriorityParserRuleCall_3_0; }
		
		//declaration+=Declaration*
		public Assignment getDeclarationAssignment_4() { return cDeclarationAssignment_4; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_4_0() { return cDeclarationDeclarationParserRuleCall_4_0; }
		
		//'</declaration>'
		public Keyword getDeclarationKeyword_5() { return cDeclarationKeyword_5; }
	}
	public class SystemDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.SystemDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationAssignment_1.eContents().get(0);
		private final Assignment cSystemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemSystemParserRuleCall_2_0 = (RuleCall)cSystemAssignment_2.eContents().get(0);
		private final Assignment cProgressMeasureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProgressMeasureProgressMeasureParserRuleCall_3_0 = (RuleCall)cProgressMeasureAssignment_3.eContents().get(0);
		private final Keyword cSystemKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SystemDeclarations declarations::SystemDeclarations:
		//	'<system>'
		//	declaration+=Declaration*
		//	system=System
		//	progressMeasure=ProgressMeasure?
		//	'</system>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<system>' declaration+=Declaration* system=System progressMeasure=ProgressMeasure? '</system>'
		public Group getGroup() { return cGroup; }
		
		//'<system>'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//declaration+=Declaration*
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0() { return cDeclarationDeclarationParserRuleCall_1_0; }
		
		//system=System
		public Assignment getSystemAssignment_2() { return cSystemAssignment_2; }
		
		//System
		public RuleCall getSystemSystemParserRuleCall_2_0() { return cSystemSystemParserRuleCall_2_0; }
		
		//progressMeasure=ProgressMeasure?
		public Assignment getProgressMeasureAssignment_3() { return cProgressMeasureAssignment_3; }
		
		//ProgressMeasure
		public RuleCall getProgressMeasureProgressMeasureParserRuleCall_3_0() { return cProgressMeasureProgressMeasureParserRuleCall_3_0; }
		
		//'</system>'
		public Keyword getSystemKeyword_4() { return cSystemKeyword_4; }
	}
	public class LocalDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.LocalDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final Keyword cDeclarationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LocalDeclarations declarations::LocalDeclarations:
		//	{declarations::LocalDeclarations}
		//	'<declaration>'
		//	declaration+=Declaration*
		//	'</declaration>';
		@Override public ParserRule getRule() { return rule; }
		
		//{declarations::LocalDeclarations} '<declaration>' declaration+=Declaration* '</declaration>'
		public Group getGroup() { return cGroup; }
		
		//{declarations::LocalDeclarations}
		public Action getLocalDeclarationsAction_0() { return cLocalDeclarationsAction_0; }
		
		//'<declaration>'
		public Keyword getDeclarationKeyword_1() { return cDeclarationKeyword_1; }
		
		//declaration+=Declaration*
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_2_0() { return cDeclarationDeclarationParserRuleCall_2_0; }
		
		//'</declaration>'
		public Keyword getDeclarationKeyword_3() { return cDeclarationKeyword_3; }
	}
	public class LocalNonXmlDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.LocalNonXmlDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationAssignment_1.eContents().get(0);
		
		//LocalNonXmlDeclarations declarations::LocalDeclarations:
		//	{declarations::LocalDeclarations} declaration+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//{declarations::LocalDeclarations} declaration+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//{declarations::LocalDeclarations}
		public Action getLocalDeclarationsAction_0() { return cLocalDeclarationsAction_0; }
		
		//declaration+=Declaration*
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0() { return cDeclarationDeclarationParserRuleCall_1_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypeDeclarationParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTemplateDeclarationParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Declaration declarations::Declaration:
		//	FunctionDeclaration | (VariableDeclaration | TypeDeclaration | TemplateDeclaration) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionDeclaration | (VariableDeclaration | TypeDeclaration | TemplateDeclaration) ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_0() { return cFunctionDeclarationParserRuleCall_0; }
		
		//(VariableDeclaration | TypeDeclaration | TemplateDeclaration) ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//VariableDeclaration | TypeDeclaration | TemplateDeclaration
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1_0_0() { return cVariableDeclarationParserRuleCall_1_0_0; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_1_0_1() { return cTypeDeclarationParserRuleCall_1_0_1; }
		
		//TemplateDeclaration
		public RuleCall getTemplateDeclarationParserRuleCall_1_0_2() { return cTemplateDeclarationParserRuleCall_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.FunctionDeclaration");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//FunctionDeclaration declarations::FunctionDeclaration:
		//	function=Function;
		@Override public ParserRule getRule() { return rule; }
		
		//function=Function
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0() { return cFunctionFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeTypeDefinitionParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_3_0_0 = (RuleCall)cParameterAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_1_0 = (RuleCall)cParameterAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//Function declarations::Function:
		//	returnType=TypeDefinition name=ID
		//	'(' (parameter+=Parameter ("," parameter+=Parameter)*)? ')'
		//	block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=TypeDefinition name=ID '(' (parameter+=Parameter ("," parameter+=Parameter)*)? ')' block=Block
		public Group getGroup() { return cGroup; }
		
		//returnType=TypeDefinition
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//TypeDefinition
		public RuleCall getReturnTypeTypeDefinitionParserRuleCall_0_0() { return cReturnTypeTypeDefinitionParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_3_0() { return cParameterAssignment_3_0; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_0_0() { return cParameterParameterParserRuleCall_3_0_0; }
		
		//("," parameter+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1_1() { return cParameterAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_1_0() { return cParameterParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChannelVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClockVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableDeclaration declarations::VariableDeclaration:
		//	ChannelVariableDeclaration | ClockVariableDeclaration | DataVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ChannelVariableDeclaration | ClockVariableDeclaration | DataVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ChannelVariableDeclaration
		public RuleCall getChannelVariableDeclarationParserRuleCall_0() { return cChannelVariableDeclarationParserRuleCall_0; }
		
		//ClockVariableDeclaration
		public RuleCall getClockVariableDeclarationParserRuleCall_1() { return cClockVariableDeclarationParserRuleCall_1; }
		
		//DataVariableDeclaration
		public RuleCall getDataVariableDeclarationParserRuleCall_2() { return cDataVariableDeclarationParserRuleCall_2; }
	}
	public class ParamVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamVariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParamChannelVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamClockVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParamDataVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParamVariableDeclaration declarations::VariableDeclaration:
		//	ParamChannelVariableDeclaration | ParamClockVariableDeclaration | ParamDataVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ParamChannelVariableDeclaration | ParamClockVariableDeclaration | ParamDataVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParamChannelVariableDeclaration
		public RuleCall getParamChannelVariableDeclarationParserRuleCall_0() { return cParamChannelVariableDeclarationParserRuleCall_0; }
		
		//ParamClockVariableDeclaration
		public RuleCall getParamClockVariableDeclarationParserRuleCall_1() { return cParamClockVariableDeclarationParserRuleCall_1; }
		
		//ParamDataVariableDeclaration
		public RuleCall getParamDataVariableDeclarationParserRuleCall_2() { return cParamDataVariableDeclarationParserRuleCall_2; }
	}
	public class ParamRefVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamRefVariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParamRefChannelVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamRefClockVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParamRefDataVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParamRefVariableDeclaration declarations::VariableDeclaration:
		//	ParamRefChannelVariableDeclaration | ParamRefClockVariableDeclaration | ParamRefDataVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ParamRefChannelVariableDeclaration | ParamRefClockVariableDeclaration | ParamRefDataVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParamRefChannelVariableDeclaration
		public RuleCall getParamRefChannelVariableDeclarationParserRuleCall_0() { return cParamRefChannelVariableDeclarationParserRuleCall_0; }
		
		//ParamRefClockVariableDeclaration
		public RuleCall getParamRefClockVariableDeclarationParserRuleCall_1() { return cParamRefClockVariableDeclarationParserRuleCall_1; }
		
		//ParamRefDataVariableDeclaration
		public RuleCall getParamRefDataVariableDeclarationParserRuleCall_2() { return cParamRefDataVariableDeclarationParserRuleCall_2; }
	}
	public class ChannelVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ChannelVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cUrgentAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cUrgentUrgentKeyword_0_0_0 = (Keyword)cUrgentAssignment_0_0.eContents().get(0);
		private final Assignment cBroadcastAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cBroadcastBroadcastKeyword_0_1_0 = (Keyword)cBroadcastAssignment_0_1.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionChannelTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//ChannelVariableDeclaration declarations::ChannelVariableDeclaration:
		//	(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference variable+=Variable (","
		//	variable+=Variable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference variable+=Variable (","
		//variable+=Variable)*
		public Group getGroup() { return cGroup; }
		
		//urgent?='urgent'? & broadcast?='broadcast'?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//urgent?='urgent'?
		public Assignment getUrgentAssignment_0_0() { return cUrgentAssignment_0_0; }
		
		//'urgent'
		public Keyword getUrgentUrgentKeyword_0_0_0() { return cUrgentUrgentKeyword_0_0_0; }
		
		//broadcast?='broadcast'?
		public Assignment getBroadcastAssignment_0_1() { return cBroadcastAssignment_0_1; }
		
		//'broadcast'
		public Keyword getBroadcastBroadcastKeyword_0_1_0() { return cBroadcastBroadcastKeyword_0_1_0; }
		
		//typeDefinition=ChannelTypeReference
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//ChannelTypeReference
		public RuleCall getTypeDefinitionChannelTypeReferenceParserRuleCall_1_0() { return cTypeDefinitionChannelTypeReferenceParserRuleCall_1_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
		
		//("," variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}
	public class ParamChannelVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamChannelVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cUrgentAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cUrgentUrgentKeyword_0_0_0 = (Keyword)cUrgentAssignment_0_0.eContents().get(0);
		private final Assignment cBroadcastAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cBroadcastBroadcastKeyword_0_1_0 = (Keyword)cBroadcastAssignment_0_1.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionChannelTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		
		//ParamChannelVariableDeclaration declarations::ChannelVariableDeclaration:
		//	(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference variable+=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference variable+=Variable
		public Group getGroup() { return cGroup; }
		
		//urgent?='urgent'? & broadcast?='broadcast'?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//urgent?='urgent'?
		public Assignment getUrgentAssignment_0_0() { return cUrgentAssignment_0_0; }
		
		//'urgent'
		public Keyword getUrgentUrgentKeyword_0_0_0() { return cUrgentUrgentKeyword_0_0_0; }
		
		//broadcast?='broadcast'?
		public Assignment getBroadcastAssignment_0_1() { return cBroadcastAssignment_0_1; }
		
		//'broadcast'
		public Keyword getBroadcastBroadcastKeyword_0_1_0() { return cBroadcastBroadcastKeyword_0_1_0; }
		
		//typeDefinition=ChannelTypeReference
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//ChannelTypeReference
		public RuleCall getTypeDefinitionChannelTypeReferenceParserRuleCall_1_0() { return cTypeDefinitionChannelTypeReferenceParserRuleCall_1_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
	}
	public class ParamRefChannelVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamRefChannelVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cUrgentAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cUrgentUrgentKeyword_0_0_0 = (Keyword)cUrgentAssignment_0_0.eContents().get(0);
		private final Assignment cBroadcastAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cBroadcastBroadcastKeyword_0_1_0 = (Keyword)cBroadcastAssignment_0_1.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionChannelTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Keyword cAmpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//ParamRefChannelVariableDeclaration declarations::ChannelVariableDeclaration:
		//	(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference '&amp;' variable+=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference '&amp;' variable+=Variable
		public Group getGroup() { return cGroup; }
		
		//urgent?='urgent'? & broadcast?='broadcast'?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//urgent?='urgent'?
		public Assignment getUrgentAssignment_0_0() { return cUrgentAssignment_0_0; }
		
		//'urgent'
		public Keyword getUrgentUrgentKeyword_0_0_0() { return cUrgentUrgentKeyword_0_0_0; }
		
		//broadcast?='broadcast'?
		public Assignment getBroadcastAssignment_0_1() { return cBroadcastAssignment_0_1; }
		
		//'broadcast'
		public Keyword getBroadcastBroadcastKeyword_0_1_0() { return cBroadcastBroadcastKeyword_0_1_0; }
		
		//typeDefinition=ChannelTypeReference
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//ChannelTypeReference
		public RuleCall getTypeDefinitionChannelTypeReferenceParserRuleCall_1_0() { return cTypeDefinitionChannelTypeReferenceParserRuleCall_1_0; }
		
		//'&amp;'
		public Keyword getAmpKeyword_2() { return cAmpKeyword_2; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}
	public class ClockVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ClockVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDefinitionClockTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeDefinitionAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		
		//ClockVariableDeclaration declarations::ClockVariableDeclaration:
		//	typeDefinition=ClockTypeReference variable+=Variable ("," variable+=Variable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//typeDefinition=ClockTypeReference variable+=Variable ("," variable+=Variable)*
		public Group getGroup() { return cGroup; }
		
		//typeDefinition=ClockTypeReference
		public Assignment getTypeDefinitionAssignment_0() { return cTypeDefinitionAssignment_0; }
		
		//ClockTypeReference
		public RuleCall getTypeDefinitionClockTypeReferenceParserRuleCall_0_0() { return cTypeDefinitionClockTypeReferenceParserRuleCall_0_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//("," variable+=Variable)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_1_0() { return cVariableVariableParserRuleCall_2_1_0; }
	}
	public class ParamClockVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamClockVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDefinitionClockTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeDefinitionAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//ParamClockVariableDeclaration declarations::ClockVariableDeclaration:
		//	typeDefinition=ClockTypeReference variable+=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//typeDefinition=ClockTypeReference variable+=Variable
		public Group getGroup() { return cGroup; }
		
		//typeDefinition=ClockTypeReference
		public Assignment getTypeDefinitionAssignment_0() { return cTypeDefinitionAssignment_0; }
		
		//ClockTypeReference
		public RuleCall getTypeDefinitionClockTypeReferenceParserRuleCall_0_0() { return cTypeDefinitionClockTypeReferenceParserRuleCall_0_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
	}
	public class ParamRefClockVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamRefClockVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDefinitionClockTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeDefinitionAssignment_0.eContents().get(0);
		private final Keyword cAmpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		
		//ParamRefClockVariableDeclaration declarations::ClockVariableDeclaration:
		//	typeDefinition=ClockTypeReference '&amp;' variable+=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//typeDefinition=ClockTypeReference '&amp;' variable+=Variable
		public Group getGroup() { return cGroup; }
		
		//typeDefinition=ClockTypeReference
		public Assignment getTypeDefinitionAssignment_0() { return cTypeDefinitionAssignment_0; }
		
		//ClockTypeReference
		public RuleCall getTypeDefinitionClockTypeReferenceParserRuleCall_0_0() { return cTypeDefinitionClockTypeReferenceParserRuleCall_0_0; }
		
		//'&amp;'
		public Keyword getAmpKeyword_1() { return cAmpKeyword_1; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
	}
	public class DataVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.DataVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixDataVariablePrefixEnumRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//DataVariableDeclaration declarations::DataVariableDeclaration:
		//	prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition variable+=Variable ("," variable+=Variable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition variable+=Variable ("," variable+=Variable)*
		public Group getGroup() { return cGroup; }
		
		//prefix=DataVariablePrefix?
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//DataVariablePrefix
		public RuleCall getPrefixDataVariablePrefixEnumRuleCall_0_0() { return cPrefixDataVariablePrefixEnumRuleCall_0_0; }
		
		//-> typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
		
		//("," variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}
	public class ParamDataVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamDataVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixDataVariablePrefixEnumRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		
		//ParamDataVariableDeclaration declarations::DataVariableDeclaration:
		//	prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition variable+=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition variable+=Variable
		public Group getGroup() { return cGroup; }
		
		//prefix=DataVariablePrefix?
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//DataVariablePrefix
		public RuleCall getPrefixDataVariablePrefixEnumRuleCall_0_0() { return cPrefixDataVariablePrefixEnumRuleCall_0_0; }
		
		//-> typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
	}
	public class ParamRefDataVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ParamRefDataVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixDataVariablePrefixEnumRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Keyword cAmpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//ParamRefDataVariableDeclaration declarations::DataVariableDeclaration:
		//	prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition '&amp;' variable+=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition '&amp;' variable+=Variable
		public Group getGroup() { return cGroup; }
		
		//prefix=DataVariablePrefix?
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//DataVariablePrefix
		public RuleCall getPrefixDataVariablePrefixEnumRuleCall_0_0() { return cPrefixDataVariablePrefixEnumRuleCall_0_0; }
		
		//-> typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0; }
		
		//'&amp;'
		public Keyword getAmpKeyword_2() { return cAmpKeyword_2; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDeclaredTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeDeclaredTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		
		//TypeDeclaration declarations::TypeDeclaration:
		//	'typedef' typeDefinition=TypeDefinition type+=DeclaredType ("," type+=DeclaredType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef' typeDefinition=TypeDefinition type+=DeclaredType ("," type+=DeclaredType)*
		public Group getGroup() { return cGroup; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0; }
		
		//type+=DeclaredType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DeclaredType
		public RuleCall getTypeDeclaredTypeParserRuleCall_2_0() { return cTypeDeclaredTypeParserRuleCall_2_0; }
		
		//("," type+=DeclaredType)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//type+=DeclaredType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//DeclaredType
		public RuleCall getTypeDeclaredTypeParserRuleCall_3_1_0() { return cTypeDeclaredTypeParserRuleCall_3_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParamVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariableDeclarationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariableDeclarationParamRefVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cVariableDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cCallTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCallTypeCallByReferenceEnumRuleCall_1_1_0 = (RuleCall)cCallTypeAssignment_1_1.eContents().get(0);
		
		//Parameter declarations::Parameter:
		//	variableDeclaration=ParamVariableDeclaration | variableDeclaration=ParamRefVariableDeclaration
		//	callType=CallByReference;
		@Override public ParserRule getRule() { return rule; }
		
		//variableDeclaration=ParamVariableDeclaration | variableDeclaration=ParamRefVariableDeclaration callType=CallByReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variableDeclaration=ParamVariableDeclaration
		public Assignment getVariableDeclarationAssignment_0() { return cVariableDeclarationAssignment_0; }
		
		//ParamVariableDeclaration
		public RuleCall getVariableDeclarationParamVariableDeclarationParserRuleCall_0_0() { return cVariableDeclarationParamVariableDeclarationParserRuleCall_0_0; }
		
		//variableDeclaration=ParamRefVariableDeclaration callType=CallByReference
		public Group getGroup_1() { return cGroup_1; }
		
		//variableDeclaration=ParamRefVariableDeclaration
		public Assignment getVariableDeclarationAssignment_1_0() { return cVariableDeclarationAssignment_1_0; }
		
		//ParamRefVariableDeclaration
		public RuleCall getVariableDeclarationParamRefVariableDeclarationParserRuleCall_1_0_0() { return cVariableDeclarationParamRefVariableDeclarationParserRuleCall_1_0_0; }
		
		//callType=CallByReference
		public Assignment getCallTypeAssignment_1_1() { return cCallTypeAssignment_1_1; }
		
		//CallByReference
		public RuleCall getCallTypeCallByReferenceEnumRuleCall_1_1_0() { return cCallTypeCallByReferenceEnumRuleCall_1_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexIndexParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitializerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_3_1_0 = (RuleCall)cInitializerAssignment_3_1.eContents().get(0);
		
		//Variable declarations::Variable:
		//	{declarations::Variable} name=ID index+=Index* ('=' initializer=Initializer)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{declarations::Variable} name=ID index+=Index* ('=' initializer=Initializer)?
		public Group getGroup() { return cGroup; }
		
		//{declarations::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//index+=Index*
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//Index
		public RuleCall getIndexIndexParserRuleCall_2_0() { return cIndexIndexParserRuleCall_2_0; }
		
		//('=' initializer=Initializer)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//initializer=Initializer
		public Assignment getInitializerAssignment_3_1() { return cInitializerAssignment_3_1; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_3_1_0() { return cInitializerInitializerParserRuleCall_3_1_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Index");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueIndexParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Index declarations::Index:
		//	ValueIndex | TypeIndex;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueIndex | TypeIndex
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueIndex
		public RuleCall getValueIndexParserRuleCall_0() { return cValueIndexParserRuleCall_0; }
		
		//TypeIndex
		public RuleCall getTypeIndexParserRuleCall_1() { return cTypeIndexParserRuleCall_1; }
	}
	public class ValueIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ValueIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeExpressionExpressionParserRuleCall_1_0 = (RuleCall)cSizeExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ValueIndex declarations::ValueIndex:
		//	'[' sizeExpression=Expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' sizeExpression=Expression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//sizeExpression=Expression
		public Assignment getSizeExpressionAssignment_1() { return cSizeExpressionAssignment_1; }
		
		//Expression
		public RuleCall getSizeExpressionExpressionParserRuleCall_1_0() { return cSizeExpressionExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class TypeIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.TypeIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeIndex declarations::TypeIndex:
		//	'[' typeDefinition=TypeDefinition ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' typeDefinition=TypeDefinition ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionInitializerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Initializer declarations::Initializer:
		//	ExpressionInitializer | ArrayInitializer;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionInitializer | ArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionInitializer
		public RuleCall getExpressionInitializerParserRuleCall_0() { return cExpressionInitializerParserRuleCall_0; }
		
		//ArrayInitializer
		public RuleCall getArrayInitializerParserRuleCall_1() { return cArrayInitializerParserRuleCall_1; }
	}
	public class ExpressionInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ExpressionInitializer");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ExpressionInitializer declarations::ExpressionInitializer:
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class ArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitializerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_1_0 = (RuleCall)cInitializerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitializerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_2_1_0 = (RuleCall)cInitializerAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayInitializer declarations::ArrayInitializer:
		//	'{' initializer+=Initializer ("," initializer+=Initializer)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' initializer+=Initializer ("," initializer+=Initializer)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//initializer+=Initializer
		public Assignment getInitializerAssignment_1() { return cInitializerAssignment_1; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_0() { return cInitializerInitializerParserRuleCall_1_0; }
		
		//("," initializer+=Initializer)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//initializer+=Initializer
		public Assignment getInitializerAssignment_2_1() { return cInitializerAssignment_2_1; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_2_1_0() { return cInitializerInitializerParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TemplateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.TemplateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclaredTemplateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclaredTemplateRedefinedTemplateParserRuleCall_0_0 = (RuleCall)cDeclaredTemplateAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TemplateDeclaration system::TemplateDeclaration:
		//	declaredTemplate=RedefinedTemplate
		//	'(' (argument+=Expression (',' argument+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//declaredTemplate=RedefinedTemplate '(' (argument+=Expression (',' argument+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//declaredTemplate=RedefinedTemplate
		public Assignment getDeclaredTemplateAssignment_0() { return cDeclaredTemplateAssignment_0; }
		
		//RedefinedTemplate
		public RuleCall getDeclaredTemplateRedefinedTemplateParserRuleCall_0_0() { return cDeclaredTemplateRedefinedTemplateParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(argument+=Expression (',' argument+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_2_0() { return cArgumentAssignment_2_0; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_0_0() { return cArgumentExpressionParserRuleCall_2_0_0; }
		
		//(',' argument+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_2_1_1() { return cArgumentAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_1_1_0() { return cArgumentExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstantiationListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstantiationListInstantiationListParserRuleCall_1_0 = (RuleCall)cInstantiationListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInstantiationListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInstantiationListInstantiationListParserRuleCall_2_1_0 = (RuleCall)cInstantiationListAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//System system::System:
		//	'system' instantiationList+=InstantiationList ("&lt;" instantiationList+=InstantiationList)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' instantiationList+=InstantiationList ("&lt;" instantiationList+=InstantiationList)* ';'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//instantiationList+=InstantiationList
		public Assignment getInstantiationListAssignment_1() { return cInstantiationListAssignment_1; }
		
		//InstantiationList
		public RuleCall getInstantiationListInstantiationListParserRuleCall_1_0() { return cInstantiationListInstantiationListParserRuleCall_1_0; }
		
		//("&lt;" instantiationList+=InstantiationList)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"&lt;"
		public Keyword getLtKeyword_2_0() { return cLtKeyword_2_0; }
		
		//instantiationList+=InstantiationList
		public Assignment getInstantiationListAssignment_2_1() { return cInstantiationListAssignment_2_1; }
		
		//InstantiationList
		public RuleCall getInstantiationListInstantiationListParserRuleCall_2_1_0() { return cInstantiationListInstantiationListParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class InstantiationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.InstantiationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTemplateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTemplateAbstractTemplateCrossReference_0_0 = (CrossReference)cTemplateAssignment_0.eContents().get(0);
		private final RuleCall cTemplateAbstractTemplateIDTerminalRuleCall_0_0_1 = (RuleCall)cTemplateAbstractTemplateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTemplateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTemplateAbstractTemplateCrossReference_1_1_0 = (CrossReference)cTemplateAssignment_1_1.eContents().get(0);
		private final RuleCall cTemplateAbstractTemplateIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTemplateAbstractTemplateCrossReference_1_1_0.eContents().get(1);
		
		//InstantiationList system::InstantiationList:
		//	template+=[templates::AbstractTemplate] ("," template+=[templates::AbstractTemplate])*;
		@Override public ParserRule getRule() { return rule; }
		
		//template+=[templates::AbstractTemplate] ("," template+=[templates::AbstractTemplate])*
		public Group getGroup() { return cGroup; }
		
		//template+=[templates::AbstractTemplate]
		public Assignment getTemplateAssignment_0() { return cTemplateAssignment_0; }
		
		//[templates::AbstractTemplate]
		public CrossReference getTemplateAbstractTemplateCrossReference_0_0() { return cTemplateAbstractTemplateCrossReference_0_0; }
		
		//ID
		public RuleCall getTemplateAbstractTemplateIDTerminalRuleCall_0_0_1() { return cTemplateAbstractTemplateIDTerminalRuleCall_0_0_1; }
		
		//("," template+=[templates::AbstractTemplate])*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//template+=[templates::AbstractTemplate]
		public Assignment getTemplateAssignment_1_1() { return cTemplateAssignment_1_1; }
		
		//[templates::AbstractTemplate]
		public CrossReference getTemplateAbstractTemplateCrossReference_1_1_0() { return cTemplateAbstractTemplateCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTemplateAbstractTemplateIDTerminalRuleCall_1_1_0_1() { return cTemplateAbstractTemplateIDTerminalRuleCall_1_1_0_1; }
	}
	public class ProgressMeasureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ProgressMeasure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProgressMeasure system::ProgressMeasure:
		//	'progress' '{' (expression+=Expression ";")+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'progress' '{' (expression+=Expression ";")+ '}'
		public Group getGroup() { return cGroup; }
		
		//'progress'
		public Keyword getProgressKeyword_0() { return cProgressKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(expression+=Expression ";")+
		public Group getGroup_2() { return cGroup_2; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ChannelPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ChannelPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHANTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPriorityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemChannelPriorityItemParserRuleCall_2_0 = (RuleCall)cItemAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cItemAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cItemChannelPriorityItemParserRuleCall_3_1_0 = (RuleCall)cItemAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChannelPriority global::ChannelPriority:
		//	CHAN 'priority' item+=ChannelPriorityItem ("<" item+=ChannelPriorityItem)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//CHAN 'priority' item+=ChannelPriorityItem ("<" item+=ChannelPriorityItem)* ';'
		public Group getGroup() { return cGroup; }
		
		//CHAN
		public RuleCall getCHANTerminalRuleCall_0() { return cCHANTerminalRuleCall_0; }
		
		//'priority'
		public Keyword getPriorityKeyword_1() { return cPriorityKeyword_1; }
		
		//item+=ChannelPriorityItem
		public Assignment getItemAssignment_2() { return cItemAssignment_2; }
		
		//ChannelPriorityItem
		public RuleCall getItemChannelPriorityItemParserRuleCall_2_0() { return cItemChannelPriorityItemParserRuleCall_2_0; }
		
		//("<" item+=ChannelPriorityItem)*
		public Group getGroup_3() { return cGroup_3; }
		
		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//item+=ChannelPriorityItem
		public Assignment getItemAssignment_3_1() { return cItemAssignment_3_1; }
		
		//ChannelPriorityItem
		public RuleCall getItemChannelPriorityItemParserRuleCall_3_1_0() { return cItemChannelPriorityItemParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChannelPriorityItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ChannelPriorityItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChannelListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultChannelPriorityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ChannelPriorityItem global::ChannelPriorityItem:
		//	ChannelList | DefaultChannelPriority;
		@Override public ParserRule getRule() { return rule; }
		
		//ChannelList | DefaultChannelPriority
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ChannelList
		public RuleCall getChannelListParserRuleCall_0() { return cChannelListParserRuleCall_0; }
		
		//DefaultChannelPriority
		public RuleCall getDefaultChannelPriorityParserRuleCall_1() { return cDefaultChannelPriorityParserRuleCall_1; }
	}
	public class ChannelListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ChannelList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChannelExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChannelExpressionIdentifierExpressionParserRuleCall_0_0 = (RuleCall)cChannelExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cChannelExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChannelExpressionIdentifierExpressionParserRuleCall_1_1_0 = (RuleCall)cChannelExpressionAssignment_1_1.eContents().get(0);
		
		//ChannelList global::ChannelList:
		//	channelExpression+=IdentifierExpression ("," channelExpression+=IdentifierExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//channelExpression+=IdentifierExpression ("," channelExpression+=IdentifierExpression)*
		public Group getGroup() { return cGroup; }
		
		//channelExpression+=IdentifierExpression
		public Assignment getChannelExpressionAssignment_0() { return cChannelExpressionAssignment_0; }
		
		//IdentifierExpression
		public RuleCall getChannelExpressionIdentifierExpressionParserRuleCall_0_0() { return cChannelExpressionIdentifierExpressionParserRuleCall_0_0; }
		
		//("," channelExpression+=IdentifierExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//channelExpression+=IdentifierExpression
		public Assignment getChannelExpressionAssignment_1_1() { return cChannelExpressionAssignment_1_1; }
		
		//IdentifierExpression
		public RuleCall getChannelExpressionIdentifierExpressionParserRuleCall_1_1_0() { return cChannelExpressionIdentifierExpressionParserRuleCall_1_1_0; }
	}
	public class DefaultChannelPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.DefaultChannelPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultChannelPriorityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DefaultChannelPriority global::DefaultChannelPriority:
		//	{global::DefaultChannelPriority}
		//	'default';
		@Override public ParserRule getRule() { return rule; }
		
		//{global::DefaultChannelPriority} 'default'
		public Group getGroup() { return cGroup; }
		
		//{global::DefaultChannelPriority}
		public Action getDefaultChannelPriorityAction_0() { return cDefaultChannelPriorityAction_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cNameKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cParameterKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParameterAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_6_1_0 = (RuleCall)cParameterAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cParameterAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_6_2_1_0 = (RuleCall)cParameterAssignment_6_2_1.eContents().get(0);
		private final Keyword cParameterKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cDeclarationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDeclarationsLocalDeclarationsParserRuleCall_7_0 = (RuleCall)cDeclarationsAssignment_7.eContents().get(0);
		private final Assignment cLocationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLocationLocationParserRuleCall_8_0 = (RuleCall)cLocationAssignment_8.eContents().get(0);
		private final Keyword cInitKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRefKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cInitAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cInitLocationCrossReference_12_0 = (CrossReference)cInitAssignment_12.eContents().get(0);
		private final RuleCall cInitLocationSTRINGTerminalRuleCall_12_0_1 = (RuleCall)cInitLocationCrossReference_12_0.eContents().get(1);
		private final Keyword cSolidusGreaterThanSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cEdgeAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cEdgeEdgeParserRuleCall_14_0 = (RuleCall)cEdgeAssignment_14.eContents().get(0);
		private final Keyword cTemplateKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Template templates::Template:
		//	'<template>'
		//	'<name' XmlAttribute* '>' name=ID '</name>' ('<parameter>' parameter+=Parameter ("," parameter+=Parameter)*
		//	'</parameter>')?
		//	declarations=LocalDeclarations?
		//	location+=Location*
		//	'<init' 'ref' '=' init=[templates::Location|STRING] '/>'
		//	edge+=Edge*
		//	'</template>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<template>' '<name' XmlAttribute* '>' name=ID '</name>' ('<parameter>' parameter+=Parameter ("," parameter+=Parameter)*
		//'</parameter>')? declarations=LocalDeclarations? location+=Location* '<init' 'ref' '='
		//init=[templates::Location|STRING] '/>' edge+=Edge* '</template>'
		public Group getGroup() { return cGroup; }
		
		//'<template>'
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }
		
		//'<name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_2() { return cXmlAttributeParserRuleCall_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'</name>'
		public Keyword getNameKeyword_5() { return cNameKeyword_5; }
		
		//('<parameter>' parameter+=Parameter ("," parameter+=Parameter)* '</parameter>')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'<parameter>'
		public Keyword getParameterKeyword_6_0() { return cParameterKeyword_6_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_6_1() { return cParameterAssignment_6_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_6_1_0() { return cParameterParameterParserRuleCall_6_1_0; }
		
		//("," parameter+=Parameter)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_6_2_1() { return cParameterAssignment_6_2_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_6_2_1_0() { return cParameterParameterParserRuleCall_6_2_1_0; }
		
		//'</parameter>'
		public Keyword getParameterKeyword_6_3() { return cParameterKeyword_6_3; }
		
		//declarations=LocalDeclarations?
		public Assignment getDeclarationsAssignment_7() { return cDeclarationsAssignment_7; }
		
		//LocalDeclarations
		public RuleCall getDeclarationsLocalDeclarationsParserRuleCall_7_0() { return cDeclarationsLocalDeclarationsParserRuleCall_7_0; }
		
		//location+=Location*
		public Assignment getLocationAssignment_8() { return cLocationAssignment_8; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_8_0() { return cLocationLocationParserRuleCall_8_0; }
		
		//'<init'
		public Keyword getInitKeyword_9() { return cInitKeyword_9; }
		
		//'ref'
		public Keyword getRefKeyword_10() { return cRefKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//init=[templates::Location|STRING]
		public Assignment getInitAssignment_12() { return cInitAssignment_12; }
		
		//[templates::Location|STRING]
		public CrossReference getInitLocationCrossReference_12_0() { return cInitLocationCrossReference_12_0; }
		
		//STRING
		public RuleCall getInitLocationSTRINGTerminalRuleCall_12_0_1() { return cInitLocationSTRINGTerminalRuleCall_12_0_1; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_13() { return cSolidusGreaterThanSignKeyword_13; }
		
		//edge+=Edge*
		public Assignment getEdgeAssignment_14() { return cEdgeAssignment_14; }
		
		//Edge
		public RuleCall getEdgeEdgeParserRuleCall_14_0() { return cEdgeEdgeParserRuleCall_14_0; }
		
		//'</template>'
		public Keyword getTemplateKeyword_15() { return cTemplateKeyword_15; }
	}
	public class RedefinedTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.RedefinedTemplate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_1_1_0 = (RuleCall)cParameterAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParameterAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_1_2_1_0 = (RuleCall)cParameterAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cReferredTemplateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferredTemplateAbstractTemplateCrossReference_3_0 = (CrossReference)cReferredTemplateAssignment_3.eContents().get(0);
		private final RuleCall cReferredTemplateAbstractTemplateIDTerminalRuleCall_3_0_1 = (RuleCall)cReferredTemplateAbstractTemplateCrossReference_3_0.eContents().get(1);
		
		//RedefinedTemplate templates::RedefinedTemplate:
		//	name=ID ('(' parameter+=Parameter (',' parameter+=Parameter)* ')')* (':=' | "=")
		//	referredTemplate=[templates::AbstractTemplate];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' parameter+=Parameter (',' parameter+=Parameter)* ')')* (':=' | "=")
		//referredTemplate=[templates::AbstractTemplate]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' parameter+=Parameter (',' parameter+=Parameter)* ')')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_1_1_0() { return cParameterParameterParserRuleCall_1_1_0; }
		
		//(',' parameter+=Parameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_1_2_1() { return cParameterAssignment_1_2_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_1_2_1_0() { return cParameterParameterParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//':=' | "="
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//referredTemplate=[templates::AbstractTemplate]
		public Assignment getReferredTemplateAssignment_3() { return cReferredTemplateAssignment_3; }
		
		//[templates::AbstractTemplate]
		public CrossReference getReferredTemplateAbstractTemplateCrossReference_3_0() { return cReferredTemplateAbstractTemplateCrossReference_3_0; }
		
		//ID
		public RuleCall getReferredTemplateAbstractTemplateIDTerminalRuleCall_3_0_1() { return cReferredTemplateAbstractTemplateIDTerminalRuleCall_3_0_1; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Location");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cELocationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNLocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBranchPointParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Location templates::Location:
		//	-> ELocation | NLocation | BranchPoint;
		@Override public ParserRule getRule() { return rule; }
		
		//-> ELocation | NLocation | BranchPoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//-> ELocation
		public RuleCall getELocationParserRuleCall_0() { return cELocationParserRuleCall_0; }
		
		//NLocation
		public RuleCall getNLocationParserRuleCall_1() { return cNLocationParserRuleCall_1; }
		
		//BranchPoint
		public RuleCall getBranchPointParserRuleCall_2() { return cBranchPointParserRuleCall_2; }
	}
	public class BranchPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.BranchPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cBranchpointKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cPositionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPositionPointParserRuleCall_0_2_0 = (RuleCall)cPositionAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cColorKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Alternatives cAlternatives_0_3_2 = (Alternatives)cGroup_0_3.eContents().get(2);
		private final Assignment cColorAssignment_0_3_2_0 = (Assignment)cAlternatives_0_3_2.eContents().get(0);
		private final RuleCall cColorColorKindEnumRuleCall_0_3_2_0_0 = (RuleCall)cColorAssignment_0_3_2_0.eContents().get(0);
		private final Assignment cColorCodeAssignment_0_3_2_1 = (Assignment)cAlternatives_0_3_2.eContents().get(1);
		private final RuleCall cColorCodeSTRINGTerminalRuleCall_0_3_2_1_0 = (RuleCall)cColorCodeAssignment_0_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cBranchpointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BranchPoint ChanceNode:
		//	('<branchpoint' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))?
		//	'>')
		//	'</branchpoint>';
		@Override public ParserRule getRule() { return rule; }
		
		//('<branchpoint' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))? '>')
		//'</branchpoint>'
		public Group getGroup() { return cGroup; }
		
		//'<branchpoint' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))? '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//'<branchpoint'
		public Keyword getBranchpointKeyword_0_0() { return cBranchpointKeyword_0_0; }
		
		//ID '=' name=STRING
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_0() { return cIDTerminalRuleCall_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1_2_0() { return cNameSTRINGTerminalRuleCall_0_1_2_0; }
		
		//position=Point?
		public Assignment getPositionAssignment_0_2() { return cPositionAssignment_0_2; }
		
		//Point
		public RuleCall getPositionPointParserRuleCall_0_2_0() { return cPositionPointParserRuleCall_0_2_0; }
		
		//('color' '=' (color=ColorKind | colorCode=STRING))?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'color'
		public Keyword getColorKeyword_0_3_0() { return cColorKeyword_0_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_3_1() { return cEqualsSignKeyword_0_3_1; }
		
		//color=ColorKind | colorCode=STRING
		public Alternatives getAlternatives_0_3_2() { return cAlternatives_0_3_2; }
		
		//color=ColorKind
		public Assignment getColorAssignment_0_3_2_0() { return cColorAssignment_0_3_2_0; }
		
		//ColorKind
		public RuleCall getColorColorKindEnumRuleCall_0_3_2_0_0() { return cColorColorKindEnumRuleCall_0_3_2_0_0; }
		
		//colorCode=STRING
		public Assignment getColorCodeAssignment_0_3_2_1() { return cColorCodeAssignment_0_3_2_1; }
		
		//STRING
		public RuleCall getColorCodeSTRINGTerminalRuleCall_0_3_2_1_0() { return cColorCodeSTRINGTerminalRuleCall_0_3_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_4() { return cGreaterThanSignKeyword_0_4; }
		
		//'</branchpoint>'
		public Keyword getBranchpointKeyword_1() { return cBranchpointKeyword_1; }
	}
	public class NLocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.NLocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLocationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cPositionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPositionPointParserRuleCall_0_2_0 = (RuleCall)cPositionAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cColorKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Alternatives cAlternatives_0_3_2 = (Alternatives)cGroup_0_3.eContents().get(2);
		private final Assignment cColorAssignment_0_3_2_0 = (Assignment)cAlternatives_0_3_2.eContents().get(0);
		private final RuleCall cColorColorKindEnumRuleCall_0_3_2_0_0 = (RuleCall)cColorAssignment_0_3_2_0.eContents().get(0);
		private final Assignment cColorCodeAssignment_0_3_2_1 = (Assignment)cAlternatives_0_3_2.eContents().get(1);
		private final RuleCall cColorCodeSTRINGTerminalRuleCall_0_3_2_1_0 = (RuleCall)cColorCodeAssignment_0_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cXmlAttributeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCommentAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCommentIDTerminalRuleCall_1_3_0 = (RuleCall)cCommentAssignment_1_3.eContents().get(0);
		private final Keyword cNameKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cKindInvariantKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cInvariantAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cInvariantExpressionParserRuleCall_2_4_0 = (RuleCall)cInvariantAssignment_2_4.eContents().get(0);
		private final Keyword cLabelKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cLocationTimeKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationTimeKindLocationKindEnumRuleCall_3_0 = (RuleCall)cLocationTimeKindAssignment_3.eContents().get(0);
		private final Keyword cLocationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NLocation templates::Location:
		//	('<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))?
		//	'>') ('<name' XmlAttribute* '>' comment=ID '</name>')? ('<label' 'kind="invariant"' XmlAttribute* '>'
		//	invariant=Expression
		//	'</label>')?
		//	locationTimeKind=LocationKind?
		//	'</location>';
		@Override public ParserRule getRule() { return rule; }
		
		//('<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))? '>') ('<name'
		//XmlAttribute* '>' comment=ID '</name>')? ('<label' 'kind="invariant"' XmlAttribute* '>' invariant=Expression
		//'</label>')? locationTimeKind=LocationKind? '</location>'
		public Group getGroup() { return cGroup; }
		
		//'<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))? '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//'<location'
		public Keyword getLocationKeyword_0_0() { return cLocationKeyword_0_0; }
		
		//ID '=' name=STRING
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_0() { return cIDTerminalRuleCall_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1_2_0() { return cNameSTRINGTerminalRuleCall_0_1_2_0; }
		
		//position=Point?
		public Assignment getPositionAssignment_0_2() { return cPositionAssignment_0_2; }
		
		//Point
		public RuleCall getPositionPointParserRuleCall_0_2_0() { return cPositionPointParserRuleCall_0_2_0; }
		
		//('color' '=' (color=ColorKind | colorCode=STRING))?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'color'
		public Keyword getColorKeyword_0_3_0() { return cColorKeyword_0_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_3_1() { return cEqualsSignKeyword_0_3_1; }
		
		//color=ColorKind | colorCode=STRING
		public Alternatives getAlternatives_0_3_2() { return cAlternatives_0_3_2; }
		
		//color=ColorKind
		public Assignment getColorAssignment_0_3_2_0() { return cColorAssignment_0_3_2_0; }
		
		//ColorKind
		public RuleCall getColorColorKindEnumRuleCall_0_3_2_0_0() { return cColorColorKindEnumRuleCall_0_3_2_0_0; }
		
		//colorCode=STRING
		public Assignment getColorCodeAssignment_0_3_2_1() { return cColorCodeAssignment_0_3_2_1; }
		
		//STRING
		public RuleCall getColorCodeSTRINGTerminalRuleCall_0_3_2_1_0() { return cColorCodeSTRINGTerminalRuleCall_0_3_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_4() { return cGreaterThanSignKeyword_0_4; }
		
		//('<name' XmlAttribute* '>' comment=ID '</name>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<name'
		public Keyword getNameKeyword_1_0() { return cNameKeyword_1_0; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_1_1() { return cXmlAttributeParserRuleCall_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
		
		//comment=ID
		public Assignment getCommentAssignment_1_3() { return cCommentAssignment_1_3; }
		
		//ID
		public RuleCall getCommentIDTerminalRuleCall_1_3_0() { return cCommentIDTerminalRuleCall_1_3_0; }
		
		//'</name>'
		public Keyword getNameKeyword_1_4() { return cNameKeyword_1_4; }
		
		//('<label' 'kind="invariant"' XmlAttribute* '>' invariant=Expression '</label>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<label'
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }
		
		//'kind="invariant"'
		public Keyword getKindInvariantKeyword_2_1() { return cKindInvariantKeyword_2_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_2_2() { return cXmlAttributeParserRuleCall_2_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
		
		//invariant=Expression
		public Assignment getInvariantAssignment_2_4() { return cInvariantAssignment_2_4; }
		
		//Expression
		public RuleCall getInvariantExpressionParserRuleCall_2_4_0() { return cInvariantExpressionParserRuleCall_2_4_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_2_5() { return cLabelKeyword_2_5; }
		
		//locationTimeKind=LocationKind?
		public Assignment getLocationTimeKindAssignment_3() { return cLocationTimeKindAssignment_3; }
		
		//LocationKind
		public RuleCall getLocationTimeKindLocationKindEnumRuleCall_3_0() { return cLocationTimeKindLocationKindEnumRuleCall_3_0; }
		
		//'</location>'
		public Keyword getLocationKeyword_4() { return cLocationKeyword_4; }
	}
	public class ELocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ELocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLocationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cPositionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPositionPointParserRuleCall_0_2_0 = (RuleCall)cPositionAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cColorKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Alternatives cAlternatives_0_3_2 = (Alternatives)cGroup_0_3.eContents().get(2);
		private final Assignment cColorAssignment_0_3_2_0 = (Assignment)cAlternatives_0_3_2.eContents().get(0);
		private final RuleCall cColorColorKindEnumRuleCall_0_3_2_0_0 = (RuleCall)cColorAssignment_0_3_2_0.eContents().get(0);
		private final Assignment cColorCodeAssignment_0_3_2_1 = (Assignment)cAlternatives_0_3_2.eContents().get(1);
		private final RuleCall cColorCodeSTRINGTerminalRuleCall_0_3_2_1_0 = (RuleCall)cColorCodeAssignment_0_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cXmlAttributeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCommentAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCommentIDTerminalRuleCall_1_3_0 = (RuleCall)cCommentAssignment_1_3.eContents().get(0);
		private final Keyword cNameKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cKindInvariantKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cInvariantAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cInvariantExpressionParserRuleCall_2_4_0 = (RuleCall)cInvariantAssignment_2_4.eContents().get(0);
		private final Keyword cLabelKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cKindExponentialrateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cXmlAttributeParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExitRateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cExitRateAlternatives_7_0 = (Alternatives)cExitRateAssignment_7.eContents().get(0);
		private final RuleCall cExitRateRatioExpressionParserRuleCall_7_0_0 = (RuleCall)cExitRateAlternatives_7_0.eContents().get(0);
		private final RuleCall cExitRateExpressionParserRuleCall_7_0_1 = (RuleCall)cExitRateAlternatives_7_0.eContents().get(1);
		private final Keyword cLabelKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cLocationTimeKindAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLocationTimeKindLocationKindEnumRuleCall_9_0 = (RuleCall)cLocationTimeKindAssignment_9.eContents().get(0);
		private final Keyword cLocationKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ELocation ExponentialLocation:
		//	('<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))?
		//	'>') ('<name' XmlAttribute* '>' comment=ID '</name>')? ('<label' 'kind="invariant"' XmlAttribute* '>'
		//	invariant=Expression
		//	'</label>')?
		//	'<label' -> 'kind="exponentialrate"' XmlAttribute* '>'
		//	exitRate=(RatioExpression | Expression)
		//	'</label>'
		//	locationTimeKind=LocationKind?
		//	'</location>';
		@Override public ParserRule getRule() { return rule; }
		
		//('<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))? '>') ('<name'
		//XmlAttribute* '>' comment=ID '</name>')? ('<label' 'kind="invariant"' XmlAttribute* '>' invariant=Expression
		//'</label>')? '<label' -> 'kind="exponentialrate"' XmlAttribute* '>' exitRate=(RatioExpression | Expression) '</label>'
		//locationTimeKind=LocationKind? '</location>'
		public Group getGroup() { return cGroup; }
		
		//'<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))? '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//'<location'
		public Keyword getLocationKeyword_0_0() { return cLocationKeyword_0_0; }
		
		//ID '=' name=STRING
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_0() { return cIDTerminalRuleCall_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1_2_0() { return cNameSTRINGTerminalRuleCall_0_1_2_0; }
		
		//position=Point?
		public Assignment getPositionAssignment_0_2() { return cPositionAssignment_0_2; }
		
		//Point
		public RuleCall getPositionPointParserRuleCall_0_2_0() { return cPositionPointParserRuleCall_0_2_0; }
		
		//('color' '=' (color=ColorKind | colorCode=STRING))?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'color'
		public Keyword getColorKeyword_0_3_0() { return cColorKeyword_0_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_3_1() { return cEqualsSignKeyword_0_3_1; }
		
		//color=ColorKind | colorCode=STRING
		public Alternatives getAlternatives_0_3_2() { return cAlternatives_0_3_2; }
		
		//color=ColorKind
		public Assignment getColorAssignment_0_3_2_0() { return cColorAssignment_0_3_2_0; }
		
		//ColorKind
		public RuleCall getColorColorKindEnumRuleCall_0_3_2_0_0() { return cColorColorKindEnumRuleCall_0_3_2_0_0; }
		
		//colorCode=STRING
		public Assignment getColorCodeAssignment_0_3_2_1() { return cColorCodeAssignment_0_3_2_1; }
		
		//STRING
		public RuleCall getColorCodeSTRINGTerminalRuleCall_0_3_2_1_0() { return cColorCodeSTRINGTerminalRuleCall_0_3_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_4() { return cGreaterThanSignKeyword_0_4; }
		
		//('<name' XmlAttribute* '>' comment=ID '</name>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<name'
		public Keyword getNameKeyword_1_0() { return cNameKeyword_1_0; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_1_1() { return cXmlAttributeParserRuleCall_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
		
		//comment=ID
		public Assignment getCommentAssignment_1_3() { return cCommentAssignment_1_3; }
		
		//ID
		public RuleCall getCommentIDTerminalRuleCall_1_3_0() { return cCommentIDTerminalRuleCall_1_3_0; }
		
		//'</name>'
		public Keyword getNameKeyword_1_4() { return cNameKeyword_1_4; }
		
		//('<label' 'kind="invariant"' XmlAttribute* '>' invariant=Expression '</label>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<label'
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }
		
		//'kind="invariant"'
		public Keyword getKindInvariantKeyword_2_1() { return cKindInvariantKeyword_2_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_2_2() { return cXmlAttributeParserRuleCall_2_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
		
		//invariant=Expression
		public Assignment getInvariantAssignment_2_4() { return cInvariantAssignment_2_4; }
		
		//Expression
		public RuleCall getInvariantExpressionParserRuleCall_2_4_0() { return cInvariantExpressionParserRuleCall_2_4_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_2_5() { return cLabelKeyword_2_5; }
		
		//'<label'
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }
		
		//-> 'kind="exponentialrate"'
		public Keyword getKindExponentialrateKeyword_4() { return cKindExponentialrateKeyword_4; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_5() { return cXmlAttributeParserRuleCall_5; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//exitRate=(RatioExpression | Expression)
		public Assignment getExitRateAssignment_7() { return cExitRateAssignment_7; }
		
		//(RatioExpression | Expression)
		public Alternatives getExitRateAlternatives_7_0() { return cExitRateAlternatives_7_0; }
		
		//RatioExpression
		public RuleCall getExitRateRatioExpressionParserRuleCall_7_0_0() { return cExitRateRatioExpressionParserRuleCall_7_0_0; }
		
		//Expression
		public RuleCall getExitRateExpressionParserRuleCall_7_0_1() { return cExitRateExpressionParserRuleCall_7_0_1; }
		
		//'</label>'
		public Keyword getLabelKeyword_8() { return cLabelKeyword_8; }
		
		//locationTimeKind=LocationKind?
		public Assignment getLocationTimeKindAssignment_9() { return cLocationTimeKindAssignment_9; }
		
		//LocationKind
		public RuleCall getLocationTimeKindLocationKindEnumRuleCall_9_0() { return cLocationTimeKindLocationKindEnumRuleCall_9_0; }
		
		//'</location>'
		public Keyword getLocationKeyword_10() { return cLocationKeyword_10; }
	}
	public class EdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Edge");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCEdgeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNEdgeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Edge templates::Edge:
		//	-> CEdge | NEdge;
		@Override public ParserRule getRule() { return rule; }
		
		//-> CEdge | NEdge
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//-> CEdge
		public RuleCall getCEdgeParserRuleCall_0() { return cCEdgeParserRuleCall_0; }
		
		//NEdge
		public RuleCall getNEdgeParserRuleCall_1() { return cNEdgeParserRuleCall_1; }
	}
	public class NEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.NEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColorKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Alternatives cAlternatives_0_1_2 = (Alternatives)cGroup_0_1.eContents().get(2);
		private final Assignment cColorAssignment_0_1_2_0 = (Assignment)cAlternatives_0_1_2.eContents().get(0);
		private final RuleCall cColorColorKindEnumRuleCall_0_1_2_0_0 = (RuleCall)cColorAssignment_0_1_2_0.eContents().get(0);
		private final Assignment cColorCodeAssignment_0_1_2_1 = (Assignment)cAlternatives_0_1_2.eContents().get(1);
		private final RuleCall cColorCodeSTRINGTerminalRuleCall_0_1_2_1_0 = (RuleCall)cColorCodeAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSourceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRefKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSourceAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cSourceLocationCrossReference_1_3_0 = (CrossReference)cSourceAssignment_1_3.eContents().get(0);
		private final RuleCall cSourceLocationSTRINGTerminalRuleCall_1_3_0_1 = (RuleCall)cSourceLocationCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSolidusGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTargetKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRefKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTargetAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cTargetLocationCrossReference_2_3_0 = (CrossReference)cTargetAssignment_2_3.eContents().get(0);
		private final RuleCall cTargetLocationSTRINGTerminalRuleCall_2_3_0_1 = (RuleCall)cTargetLocationCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSolidusGreaterThanSignKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLabelKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cKindSelectKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cSelectionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cSelectionSelectionParserRuleCall_3_4_0 = (RuleCall)cSelectionAssignment_3_4.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cCommaKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cSelectionAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cSelectionSelectionParserRuleCall_3_5_1_0 = (RuleCall)cSelectionAssignment_3_5_1.eContents().get(0);
		private final Keyword cLabelKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cKindGuardKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cGuardAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cGuardExpressionParserRuleCall_4_4_0 = (RuleCall)cGuardAssignment_4_4.eContents().get(0);
		private final Keyword cLabelKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cKindSynchronisationKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cSynchronizationAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cSynchronizationSynchronizationParserRuleCall_5_4_0 = (RuleCall)cSynchronizationAssignment_5_4.eContents().get(0);
		private final Keyword cLabelKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cKindAssignmentKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cUpdateAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cUpdateExpressionParserRuleCall_6_4_0 = (RuleCall)cUpdateAssignment_6_4.eContents().get(0);
		private final Group cGroup_6_5 = (Group)cGroup_6.eContents().get(5);
		private final Keyword cCommaKeyword_6_5_0 = (Keyword)cGroup_6_5.eContents().get(0);
		private final Assignment cUpdateAssignment_6_5_1 = (Assignment)cGroup_6_5.eContents().get(1);
		private final RuleCall cUpdateExpressionParserRuleCall_6_5_1_0 = (RuleCall)cUpdateAssignment_6_5_1.eContents().get(0);
		private final Keyword cLabelKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cNailKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBendPointAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBendPointPointParserRuleCall_7_1_0 = (RuleCall)cBendPointAssignment_7_1.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cTransitionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//NEdge templates::Edge:
		//	('<transition' ('color' '=' (color=ColorKind | colorCode=STRING))?
		//	'>') ('<source' 'ref' '=' source=[templates::Location|STRING] '/>') ('<target' 'ref' '='
		//	target=[templates::Location|STRING] '/>') ('<label' 'kind="select"' XmlAttribute* '>'
		//	selection+=Selection ("," selection+=Selection)*
		//	'</label>')? ('<label' 'kind="guard"' XmlAttribute* '>'
		//	guard=Expression
		//	'</label>')? ('<label' 'kind="synchronisation"' XmlAttribute* '>'
		//	synchronization=Synchronization
		//	'</label>')? ('<label' 'kind="assignment"' XmlAttribute* '>'
		//	update+=Expression ("," update+=Expression)*
		//	'</label>')? ('<nail' bendPoint+=Point '/>')*
		//	//		('comment' comment=EString)?
		//	//		('color' color=ColorKind)?
		//	//		('colorCode' colorCode=EString)?
		//	'</transition>';
		@Override public ParserRule getRule() { return rule; }
		
		//('<transition' ('color' '=' (color=ColorKind | colorCode=STRING))? '>') ('<source' 'ref' '='
		//source=[templates::Location|STRING] '/>') ('<target' 'ref' '=' target=[templates::Location|STRING] '/>') ('<label'
		//'kind="select"' XmlAttribute* '>' selection+=Selection ("," selection+=Selection)* '</label>')? ('<label'
		//'kind="guard"' XmlAttribute* '>' guard=Expression '</label>')? ('<label' 'kind="synchronisation"' XmlAttribute* '>'
		//synchronization=Synchronization '</label>')? ('<label' 'kind="assignment"' XmlAttribute* '>' update+=Expression (","
		//update+=Expression)* '</label>')? ('<nail' bendPoint+=Point '/>')* //		('comment' comment=EString)?
		////		('color' color=ColorKind)?
		////		('colorCode' colorCode=EString)?
		//'</transition>'
		public Group getGroup() { return cGroup; }
		
		//'<transition' ('color' '=' (color=ColorKind | colorCode=STRING))? '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//'<transition'
		public Keyword getTransitionKeyword_0_0() { return cTransitionKeyword_0_0; }
		
		//('color' '=' (color=ColorKind | colorCode=STRING))?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'color'
		public Keyword getColorKeyword_0_1_0() { return cColorKeyword_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//color=ColorKind | colorCode=STRING
		public Alternatives getAlternatives_0_1_2() { return cAlternatives_0_1_2; }
		
		//color=ColorKind
		public Assignment getColorAssignment_0_1_2_0() { return cColorAssignment_0_1_2_0; }
		
		//ColorKind
		public RuleCall getColorColorKindEnumRuleCall_0_1_2_0_0() { return cColorColorKindEnumRuleCall_0_1_2_0_0; }
		
		//colorCode=STRING
		public Assignment getColorCodeAssignment_0_1_2_1() { return cColorCodeAssignment_0_1_2_1; }
		
		//STRING
		public RuleCall getColorCodeSTRINGTerminalRuleCall_0_1_2_1_0() { return cColorCodeSTRINGTerminalRuleCall_0_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_2() { return cGreaterThanSignKeyword_0_2; }
		
		//'<source' 'ref' '=' source=[templates::Location|STRING] '/>'
		public Group getGroup_1() { return cGroup_1; }
		
		//'<source'
		public Keyword getSourceKeyword_1_0() { return cSourceKeyword_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_1() { return cRefKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//source=[templates::Location|STRING]
		public Assignment getSourceAssignment_1_3() { return cSourceAssignment_1_3; }
		
		//[templates::Location|STRING]
		public CrossReference getSourceLocationCrossReference_1_3_0() { return cSourceLocationCrossReference_1_3_0; }
		
		//STRING
		public RuleCall getSourceLocationSTRINGTerminalRuleCall_1_3_0_1() { return cSourceLocationSTRINGTerminalRuleCall_1_3_0_1; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_1_4() { return cSolidusGreaterThanSignKeyword_1_4; }
		
		//'<target' 'ref' '=' target=[templates::Location|STRING] '/>'
		public Group getGroup_2() { return cGroup_2; }
		
		//'<target'
		public Keyword getTargetKeyword_2_0() { return cTargetKeyword_2_0; }
		
		//'ref'
		public Keyword getRefKeyword_2_1() { return cRefKeyword_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }
		
		//target=[templates::Location|STRING]
		public Assignment getTargetAssignment_2_3() { return cTargetAssignment_2_3; }
		
		//[templates::Location|STRING]
		public CrossReference getTargetLocationCrossReference_2_3_0() { return cTargetLocationCrossReference_2_3_0; }
		
		//STRING
		public RuleCall getTargetLocationSTRINGTerminalRuleCall_2_3_0_1() { return cTargetLocationSTRINGTerminalRuleCall_2_3_0_1; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_2_4() { return cSolidusGreaterThanSignKeyword_2_4; }
		
		//('<label' 'kind="select"' XmlAttribute* '>' selection+=Selection ("," selection+=Selection)* '</label>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<label'
		public Keyword getLabelKeyword_3_0() { return cLabelKeyword_3_0; }
		
		//'kind="select"'
		public Keyword getKindSelectKeyword_3_1() { return cKindSelectKeyword_3_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_3_2() { return cXmlAttributeParserRuleCall_3_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }
		
		//selection+=Selection
		public Assignment getSelectionAssignment_3_4() { return cSelectionAssignment_3_4; }
		
		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_3_4_0() { return cSelectionSelectionParserRuleCall_3_4_0; }
		
		//("," selection+=Selection)*
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//","
		public Keyword getCommaKeyword_3_5_0() { return cCommaKeyword_3_5_0; }
		
		//selection+=Selection
		public Assignment getSelectionAssignment_3_5_1() { return cSelectionAssignment_3_5_1; }
		
		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_3_5_1_0() { return cSelectionSelectionParserRuleCall_3_5_1_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_3_6() { return cLabelKeyword_3_6; }
		
		//('<label' 'kind="guard"' XmlAttribute* '>' guard=Expression '</label>')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'<label'
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }
		
		//'kind="guard"'
		public Keyword getKindGuardKeyword_4_1() { return cKindGuardKeyword_4_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_4_2() { return cXmlAttributeParserRuleCall_4_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }
		
		//guard=Expression
		public Assignment getGuardAssignment_4_4() { return cGuardAssignment_4_4; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_4_4_0() { return cGuardExpressionParserRuleCall_4_4_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_4_5() { return cLabelKeyword_4_5; }
		
		//('<label' 'kind="synchronisation"' XmlAttribute* '>' synchronization=Synchronization '</label>')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'<label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//'kind="synchronisation"'
		public Keyword getKindSynchronisationKeyword_5_1() { return cKindSynchronisationKeyword_5_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_5_2() { return cXmlAttributeParserRuleCall_5_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5_3() { return cGreaterThanSignKeyword_5_3; }
		
		//synchronization=Synchronization
		public Assignment getSynchronizationAssignment_5_4() { return cSynchronizationAssignment_5_4; }
		
		//Synchronization
		public RuleCall getSynchronizationSynchronizationParserRuleCall_5_4_0() { return cSynchronizationSynchronizationParserRuleCall_5_4_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_5_5() { return cLabelKeyword_5_5; }
		
		//('<label' 'kind="assignment"' XmlAttribute* '>' update+=Expression ("," update+=Expression)* '</label>')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'<label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//'kind="assignment"'
		public Keyword getKindAssignmentKeyword_6_1() { return cKindAssignmentKeyword_6_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_6_2() { return cXmlAttributeParserRuleCall_6_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6_3() { return cGreaterThanSignKeyword_6_3; }
		
		//update+=Expression
		public Assignment getUpdateAssignment_6_4() { return cUpdateAssignment_6_4; }
		
		//Expression
		public RuleCall getUpdateExpressionParserRuleCall_6_4_0() { return cUpdateExpressionParserRuleCall_6_4_0; }
		
		//("," update+=Expression)*
		public Group getGroup_6_5() { return cGroup_6_5; }
		
		//","
		public Keyword getCommaKeyword_6_5_0() { return cCommaKeyword_6_5_0; }
		
		//update+=Expression
		public Assignment getUpdateAssignment_6_5_1() { return cUpdateAssignment_6_5_1; }
		
		//Expression
		public RuleCall getUpdateExpressionParserRuleCall_6_5_1_0() { return cUpdateExpressionParserRuleCall_6_5_1_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_6_6() { return cLabelKeyword_6_6; }
		
		//('<nail' bendPoint+=Point '/>')*
		public Group getGroup_7() { return cGroup_7; }
		
		//'<nail'
		public Keyword getNailKeyword_7_0() { return cNailKeyword_7_0; }
		
		//bendPoint+=Point
		public Assignment getBendPointAssignment_7_1() { return cBendPointAssignment_7_1; }
		
		//Point
		public RuleCall getBendPointPointParserRuleCall_7_1_0() { return cBendPointPointParserRuleCall_7_1_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_7_2() { return cSolidusGreaterThanSignKeyword_7_2; }
		
		////		('comment' comment=EString)?
		////		('color' color=ColorKind)?
		////		('colorCode' colorCode=EString)?
		//'</transition>'
		public Keyword getTransitionKeyword_8() { return cTransitionKeyword_8; }
	}
	public class CEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.CEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColorKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Alternatives cAlternatives_0_1_2 = (Alternatives)cGroup_0_1.eContents().get(2);
		private final Assignment cColorAssignment_0_1_2_0 = (Assignment)cAlternatives_0_1_2.eContents().get(0);
		private final RuleCall cColorColorKindEnumRuleCall_0_1_2_0_0 = (RuleCall)cColorAssignment_0_1_2_0.eContents().get(0);
		private final Assignment cColorCodeAssignment_0_1_2_1 = (Assignment)cAlternatives_0_1_2.eContents().get(1);
		private final RuleCall cColorCodeSTRINGTerminalRuleCall_0_1_2_1_0 = (RuleCall)cColorCodeAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSourceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRefKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSourceAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cSourceLocationCrossReference_1_3_0 = (CrossReference)cSourceAssignment_1_3.eContents().get(0);
		private final RuleCall cSourceLocationSTRINGTerminalRuleCall_1_3_0_1 = (RuleCall)cSourceLocationCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSolidusGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTargetKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRefKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTargetAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cTargetLocationCrossReference_2_3_0 = (CrossReference)cTargetAssignment_2_3.eContents().get(0);
		private final RuleCall cTargetLocationSTRINGTerminalRuleCall_2_3_0_1 = (RuleCall)cTargetLocationCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSolidusGreaterThanSignKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLabelKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cKindSelectKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cSelectionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cSelectionSelectionParserRuleCall_3_4_0 = (RuleCall)cSelectionAssignment_3_4.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cCommaKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cSelectionAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cSelectionSelectionParserRuleCall_3_5_1_0 = (RuleCall)cSelectionAssignment_3_5_1.eContents().get(0);
		private final Keyword cLabelKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cKindGuardKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cGuardAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cGuardExpressionParserRuleCall_4_4_0 = (RuleCall)cGuardAssignment_4_4.eContents().get(0);
		private final Keyword cLabelKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cKindSynchronisationKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cSynchronizationAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cSynchronizationSynchronizationParserRuleCall_5_4_0 = (RuleCall)cSynchronizationAssignment_5_4.eContents().get(0);
		private final Keyword cLabelKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cKindAssignmentKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cUpdateAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cUpdateExpressionParserRuleCall_6_4_0 = (RuleCall)cUpdateAssignment_6_4.eContents().get(0);
		private final Group cGroup_6_5 = (Group)cGroup_6.eContents().get(5);
		private final Keyword cCommaKeyword_6_5_0 = (Keyword)cGroup_6_5.eContents().get(0);
		private final Assignment cUpdateAssignment_6_5_1 = (Assignment)cGroup_6_5.eContents().get(1);
		private final RuleCall cUpdateExpressionParserRuleCall_6_5_1_0 = (RuleCall)cUpdateAssignment_6_5_1.eContents().get(0);
		private final Keyword cLabelKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLabelKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cKindProbabilityKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final RuleCall cXmlAttributeParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cWeightAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cWeightExpressionParserRuleCall_7_4_0 = (RuleCall)cWeightAssignment_7_4.eContents().get(0);
		private final Keyword cLabelKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cNailKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cBendPointAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cBendPointPointParserRuleCall_8_1_0 = (RuleCall)cBendPointAssignment_8_1.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Keyword cTransitionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//CEdge ChanceEdge:
		//	('<transition' ('color' '=' (color=ColorKind | colorCode=STRING))?
		//	'>') ('<source' 'ref' '=' source=[templates::Location|STRING] '/>') ('<target' 'ref' '='
		//	target=[templates::Location|STRING] '/>') ('<label' 'kind="select"' XmlAttribute* '>'
		//	selection+=Selection ("," selection+=Selection)*
		//	'</label>')? ('<label' 'kind="guard"' XmlAttribute* '>'
		//	guard=Expression
		//	'</label>')? ('<label' 'kind="synchronisation"' XmlAttribute* '>'
		//	synchronization=Synchronization
		//	'</label>')? ('<label' 'kind="assignment"' XmlAttribute* '>'
		//	update+=Expression ("," update+=Expression)*
		//	'</label>')? ('<label' 'kind="probability"' XmlAttribute* '>'
		//	weight=Expression
		//	'</label>') ('<nail' bendPoint+=Point '/>')*
		//	//		('comment' comment=EString)?
		//	//		('color' color=ColorKind)?
		//	//		('colorCode' colorCode=EString)?
		//	'</transition>';
		@Override public ParserRule getRule() { return rule; }
		
		//('<transition' ('color' '=' (color=ColorKind | colorCode=STRING))? '>') ('<source' 'ref' '='
		//source=[templates::Location|STRING] '/>') ('<target' 'ref' '=' target=[templates::Location|STRING] '/>') ('<label'
		//'kind="select"' XmlAttribute* '>' selection+=Selection ("," selection+=Selection)* '</label>')? ('<label'
		//'kind="guard"' XmlAttribute* '>' guard=Expression '</label>')? ('<label' 'kind="synchronisation"' XmlAttribute* '>'
		//synchronization=Synchronization '</label>')? ('<label' 'kind="assignment"' XmlAttribute* '>' update+=Expression (","
		//update+=Expression)* '</label>')? ('<label' 'kind="probability"' XmlAttribute* '>' weight=Expression '</label>')
		//('<nail' bendPoint+=Point '/>')* //		('comment' comment=EString)?
		////		('color' color=ColorKind)?
		////		('colorCode' colorCode=EString)?
		//'</transition>'
		public Group getGroup() { return cGroup; }
		
		//'<transition' ('color' '=' (color=ColorKind | colorCode=STRING))? '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//'<transition'
		public Keyword getTransitionKeyword_0_0() { return cTransitionKeyword_0_0; }
		
		//('color' '=' (color=ColorKind | colorCode=STRING))?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'color'
		public Keyword getColorKeyword_0_1_0() { return cColorKeyword_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//color=ColorKind | colorCode=STRING
		public Alternatives getAlternatives_0_1_2() { return cAlternatives_0_1_2; }
		
		//color=ColorKind
		public Assignment getColorAssignment_0_1_2_0() { return cColorAssignment_0_1_2_0; }
		
		//ColorKind
		public RuleCall getColorColorKindEnumRuleCall_0_1_2_0_0() { return cColorColorKindEnumRuleCall_0_1_2_0_0; }
		
		//colorCode=STRING
		public Assignment getColorCodeAssignment_0_1_2_1() { return cColorCodeAssignment_0_1_2_1; }
		
		//STRING
		public RuleCall getColorCodeSTRINGTerminalRuleCall_0_1_2_1_0() { return cColorCodeSTRINGTerminalRuleCall_0_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_2() { return cGreaterThanSignKeyword_0_2; }
		
		//'<source' 'ref' '=' source=[templates::Location|STRING] '/>'
		public Group getGroup_1() { return cGroup_1; }
		
		//'<source'
		public Keyword getSourceKeyword_1_0() { return cSourceKeyword_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_1() { return cRefKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//source=[templates::Location|STRING]
		public Assignment getSourceAssignment_1_3() { return cSourceAssignment_1_3; }
		
		//[templates::Location|STRING]
		public CrossReference getSourceLocationCrossReference_1_3_0() { return cSourceLocationCrossReference_1_3_0; }
		
		//STRING
		public RuleCall getSourceLocationSTRINGTerminalRuleCall_1_3_0_1() { return cSourceLocationSTRINGTerminalRuleCall_1_3_0_1; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_1_4() { return cSolidusGreaterThanSignKeyword_1_4; }
		
		//'<target' 'ref' '=' target=[templates::Location|STRING] '/>'
		public Group getGroup_2() { return cGroup_2; }
		
		//'<target'
		public Keyword getTargetKeyword_2_0() { return cTargetKeyword_2_0; }
		
		//'ref'
		public Keyword getRefKeyword_2_1() { return cRefKeyword_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }
		
		//target=[templates::Location|STRING]
		public Assignment getTargetAssignment_2_3() { return cTargetAssignment_2_3; }
		
		//[templates::Location|STRING]
		public CrossReference getTargetLocationCrossReference_2_3_0() { return cTargetLocationCrossReference_2_3_0; }
		
		//STRING
		public RuleCall getTargetLocationSTRINGTerminalRuleCall_2_3_0_1() { return cTargetLocationSTRINGTerminalRuleCall_2_3_0_1; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_2_4() { return cSolidusGreaterThanSignKeyword_2_4; }
		
		//('<label' 'kind="select"' XmlAttribute* '>' selection+=Selection ("," selection+=Selection)* '</label>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<label'
		public Keyword getLabelKeyword_3_0() { return cLabelKeyword_3_0; }
		
		//'kind="select"'
		public Keyword getKindSelectKeyword_3_1() { return cKindSelectKeyword_3_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_3_2() { return cXmlAttributeParserRuleCall_3_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }
		
		//selection+=Selection
		public Assignment getSelectionAssignment_3_4() { return cSelectionAssignment_3_4; }
		
		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_3_4_0() { return cSelectionSelectionParserRuleCall_3_4_0; }
		
		//("," selection+=Selection)*
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//","
		public Keyword getCommaKeyword_3_5_0() { return cCommaKeyword_3_5_0; }
		
		//selection+=Selection
		public Assignment getSelectionAssignment_3_5_1() { return cSelectionAssignment_3_5_1; }
		
		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_3_5_1_0() { return cSelectionSelectionParserRuleCall_3_5_1_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_3_6() { return cLabelKeyword_3_6; }
		
		//('<label' 'kind="guard"' XmlAttribute* '>' guard=Expression '</label>')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'<label'
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }
		
		//'kind="guard"'
		public Keyword getKindGuardKeyword_4_1() { return cKindGuardKeyword_4_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_4_2() { return cXmlAttributeParserRuleCall_4_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }
		
		//guard=Expression
		public Assignment getGuardAssignment_4_4() { return cGuardAssignment_4_4; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_4_4_0() { return cGuardExpressionParserRuleCall_4_4_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_4_5() { return cLabelKeyword_4_5; }
		
		//('<label' 'kind="synchronisation"' XmlAttribute* '>' synchronization=Synchronization '</label>')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'<label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//'kind="synchronisation"'
		public Keyword getKindSynchronisationKeyword_5_1() { return cKindSynchronisationKeyword_5_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_5_2() { return cXmlAttributeParserRuleCall_5_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5_3() { return cGreaterThanSignKeyword_5_3; }
		
		//synchronization=Synchronization
		public Assignment getSynchronizationAssignment_5_4() { return cSynchronizationAssignment_5_4; }
		
		//Synchronization
		public RuleCall getSynchronizationSynchronizationParserRuleCall_5_4_0() { return cSynchronizationSynchronizationParserRuleCall_5_4_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_5_5() { return cLabelKeyword_5_5; }
		
		//('<label' 'kind="assignment"' XmlAttribute* '>' update+=Expression ("," update+=Expression)* '</label>')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'<label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//'kind="assignment"'
		public Keyword getKindAssignmentKeyword_6_1() { return cKindAssignmentKeyword_6_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_6_2() { return cXmlAttributeParserRuleCall_6_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6_3() { return cGreaterThanSignKeyword_6_3; }
		
		//update+=Expression
		public Assignment getUpdateAssignment_6_4() { return cUpdateAssignment_6_4; }
		
		//Expression
		public RuleCall getUpdateExpressionParserRuleCall_6_4_0() { return cUpdateExpressionParserRuleCall_6_4_0; }
		
		//("," update+=Expression)*
		public Group getGroup_6_5() { return cGroup_6_5; }
		
		//","
		public Keyword getCommaKeyword_6_5_0() { return cCommaKeyword_6_5_0; }
		
		//update+=Expression
		public Assignment getUpdateAssignment_6_5_1() { return cUpdateAssignment_6_5_1; }
		
		//Expression
		public RuleCall getUpdateExpressionParserRuleCall_6_5_1_0() { return cUpdateExpressionParserRuleCall_6_5_1_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_6_6() { return cLabelKeyword_6_6; }
		
		//'<label' 'kind="probability"' XmlAttribute* '>' weight=Expression '</label>'
		public Group getGroup_7() { return cGroup_7; }
		
		//'<label'
		public Keyword getLabelKeyword_7_0() { return cLabelKeyword_7_0; }
		
		//'kind="probability"'
		public Keyword getKindProbabilityKeyword_7_1() { return cKindProbabilityKeyword_7_1; }
		
		//XmlAttribute*
		public RuleCall getXmlAttributeParserRuleCall_7_2() { return cXmlAttributeParserRuleCall_7_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7_3() { return cGreaterThanSignKeyword_7_3; }
		
		//weight=Expression
		public Assignment getWeightAssignment_7_4() { return cWeightAssignment_7_4; }
		
		//Expression
		public RuleCall getWeightExpressionParserRuleCall_7_4_0() { return cWeightExpressionParserRuleCall_7_4_0; }
		
		//'</label>'
		public Keyword getLabelKeyword_7_5() { return cLabelKeyword_7_5; }
		
		//('<nail' bendPoint+=Point '/>')*
		public Group getGroup_8() { return cGroup_8; }
		
		//'<nail'
		public Keyword getNailKeyword_8_0() { return cNailKeyword_8_0; }
		
		//bendPoint+=Point
		public Assignment getBendPointAssignment_8_1() { return cBendPointAssignment_8_1; }
		
		//Point
		public RuleCall getBendPointPointParserRuleCall_8_1_0() { return cBendPointPointParserRuleCall_8_1_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_8_2() { return cSolidusGreaterThanSignKeyword_8_2; }
		
		////		('comment' comment=EString)?
		////		('color' color=ColorKind)?
		////		('colorCode' colorCode=EString)?
		//'</transition>'
		public Keyword getTransitionKeyword_9() { return cTransitionKeyword_9; }
	}
	public class SynchronizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Synchronization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChannelExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChannelExpressionIdentifierExpressionParserRuleCall_0_0 = (RuleCall)cChannelExpressionAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindSynchronizationKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		
		//Synchronization templates::Synchronization:
		//	channelExpression=IdentifierExpression kind=SynchronizationKind;
		@Override public ParserRule getRule() { return rule; }
		
		//channelExpression=IdentifierExpression kind=SynchronizationKind
		public Group getGroup() { return cGroup; }
		
		//channelExpression=IdentifierExpression
		public Assignment getChannelExpressionAssignment_0() { return cChannelExpressionAssignment_0; }
		
		//IdentifierExpression
		public RuleCall getChannelExpressionIdentifierExpressionParserRuleCall_0_0() { return cChannelExpressionIdentifierExpressionParserRuleCall_0_0; }
		
		//kind=SynchronizationKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//SynchronizationKind
		public RuleCall getKindSynchronizationKindEnumRuleCall_1_0() { return cKindSynchronizationKindEnumRuleCall_1_0; }
	}
	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_2_0 = (RuleCall)cTypeDefinitionAssignment_2.eContents().get(0);
		
		//Selection templates::Selection:
		//	variable+=Variable ':' typeDefinition=TypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//variable+=Variable ':' typeDefinition=TypeDefinition
		public Group getGroup() { return cGroup; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_2() { return cTypeDefinitionAssignment_2; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_2_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_2_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cSTRINGTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Point visuals::Point:
		//	{visuals::Point} ID '=' STRING
		//	ID '=' STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{visuals::Point} ID '=' STRING ID '=' STRING
		public Group getGroup() { return cGroup; }
		
		//{visuals::Point}
		public Action getPointAction_0() { return cPointAction_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6() { return cSTRINGTerminalRuleCall_6; }
	}
	public class DeclaredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.DeclaredType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaredTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexIndexParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		
		//DeclaredType types::DeclaredType:
		//	{types::DeclaredType} name=ID index+=Index*;
		@Override public ParserRule getRule() { return rule; }
		
		//{types::DeclaredType} name=ID index+=Index*
		public Group getGroup() { return cGroup; }
		
		//{types::DeclaredType}
		public Action getDeclaredTypeAction_0() { return cDeclaredTypeAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//index+=Index*
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//Index
		public RuleCall getIndexIndexParserRuleCall_2_0() { return cIndexIndexParserRuleCall_2_0; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScalarTypeSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStructTypeSpecificationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRangeTypeSpecificationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TypeDefinition types::TypeDefinition:
		//	TypeReference | ScalarTypeSpecification | StructTypeSpecification | RangeTypeSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeReference | ScalarTypeSpecification | StructTypeSpecification | RangeTypeSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeReference
		public RuleCall getTypeReferenceParserRuleCall_0() { return cTypeReferenceParserRuleCall_0; }
		
		//ScalarTypeSpecification
		public RuleCall getScalarTypeSpecificationParserRuleCall_1() { return cScalarTypeSpecificationParserRuleCall_1; }
		
		//StructTypeSpecification
		public RuleCall getStructTypeSpecificationParserRuleCall_2() { return cStructTypeSpecificationParserRuleCall_2; }
		
		//RangeTypeSpecification
		public RuleCall getRangeTypeSpecificationParserRuleCall_3() { return cRangeTypeSpecificationParserRuleCall_3; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.TypeReference");
		private final Assignment cReferredTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredTypeTypeCrossReference_0 = (CrossReference)cReferredTypeAssignment.eContents().get(0);
		private final RuleCall cReferredTypeTypeIDTerminalRuleCall_0_1 = (RuleCall)cReferredTypeTypeCrossReference_0.eContents().get(1);
		
		//TypeReference types::TypeReference:
		//	referredType=[types::Type];
		@Override public ParserRule getRule() { return rule; }
		
		//referredType=[types::Type]
		public Assignment getReferredTypeAssignment() { return cReferredTypeAssignment; }
		
		//[types::Type]
		public CrossReference getReferredTypeTypeCrossReference_0() { return cReferredTypeTypeCrossReference_0; }
		
		//ID
		public RuleCall getReferredTypeTypeIDTerminalRuleCall_0_1() { return cReferredTypeTypeIDTerminalRuleCall_0_1; }
	}
	public class ScalarTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ScalarTypeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScalarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeExpressionExpressionParserRuleCall_2_0 = (RuleCall)cSizeExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ScalarTypeSpecification types::ScalarTypeSpecification:
		//	'scalar' '[' sizeExpression=Expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'scalar' '[' sizeExpression=Expression ']'
		public Group getGroup() { return cGroup; }
		
		//'scalar'
		public Keyword getScalarKeyword_0() { return cScalarKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//sizeExpression=Expression
		public Assignment getSizeExpressionAssignment_2() { return cSizeExpressionAssignment_2; }
		
		//Expression
		public RuleCall getSizeExpressionExpressionParserRuleCall_2_0() { return cSizeExpressionExpressionParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class StructTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.StructTypeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructTypeSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDeclarationAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDeclarationDataVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cDeclarationAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TODO: struct
		//StructTypeSpecification types::StructTypeSpecification:
		//	{types::StructTypeSpecification}
		//	'struct' '{' (declaration+=DataVariableDeclaration ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{types::StructTypeSpecification} 'struct' '{' (declaration+=DataVariableDeclaration ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//{types::StructTypeSpecification}
		public Action getStructTypeSpecificationAction_0() { return cStructTypeSpecificationAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(declaration+=DataVariableDeclaration ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//declaration+=DataVariableDeclaration
		public Assignment getDeclarationAssignment_3_0() { return cDeclarationAssignment_3_0; }
		
		//DataVariableDeclaration
		public RuleCall getDeclarationDataVariableDeclarationParserRuleCall_3_0_0() { return cDeclarationDataVariableDeclarationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RangeTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.RangeTypeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBoundsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoundsIntegerBoundsParserRuleCall_2_0 = (RuleCall)cBoundsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RangeTypeSpecification types::RangeTypeSpecification:
		//	ID '[' bounds=IntegerBounds ']';
		@Override public ParserRule getRule() { return rule; }
		
		//ID '[' bounds=IntegerBounds ']'
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//bounds=IntegerBounds
		public Assignment getBoundsAssignment_2() { return cBoundsAssignment_2; }
		
		//IntegerBounds
		public RuleCall getBoundsIntegerBoundsParserRuleCall_2_0() { return cBoundsIntegerBoundsParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class IntegerBoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.IntegerBounds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundExpressionParserRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperBoundExpressionParserRuleCall_2_0 = (RuleCall)cUpperBoundAssignment_2.eContents().get(0);
		
		//IntegerBounds types::IntegerBounds:
		//	lowerBound=Expression ',' upperBound=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=Expression ',' upperBound=Expression
		public Group getGroup() { return cGroup; }
		
		//lowerBound=Expression
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//Expression
		public RuleCall getLowerBoundExpressionParserRuleCall_0_0() { return cLowerBoundExpressionParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//upperBound=Expression
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }
		
		//Expression
		public RuleCall getUpperBoundExpressionParserRuleCall_2_0() { return cUpperBoundExpressionParserRuleCall_2_0; }
	}
	public class ClockTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ClockTypeReference");
		private final Assignment cReferredTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredTypeTypeCrossReference_0 = (CrossReference)cReferredTypeAssignment.eContents().get(0);
		private final RuleCall cReferredTypeTypeCLOCKTerminalRuleCall_0_1 = (RuleCall)cReferredTypeTypeCrossReference_0.eContents().get(1);
		
		//ClockTypeReference types::TypeReference:
		//	referredType=[types::Type|CLOCK];
		@Override public ParserRule getRule() { return rule; }
		
		//referredType=[types::Type|CLOCK]
		public Assignment getReferredTypeAssignment() { return cReferredTypeAssignment; }
		
		//[types::Type|CLOCK]
		public CrossReference getReferredTypeTypeCrossReference_0() { return cReferredTypeTypeCrossReference_0; }
		
		//CLOCK
		public RuleCall getReferredTypeTypeCLOCKTerminalRuleCall_0_1() { return cReferredTypeTypeCLOCKTerminalRuleCall_0_1; }
	}
	public class ChannelTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ChannelTypeReference");
		private final Assignment cReferredTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredTypeTypeCrossReference_0 = (CrossReference)cReferredTypeAssignment.eContents().get(0);
		private final RuleCall cReferredTypeTypeCHANTerminalRuleCall_0_1 = (RuleCall)cReferredTypeTypeCrossReference_0.eContents().get(1);
		
		//ChannelTypeReference types::TypeReference:
		//	referredType=[types::Type|CHAN];
		@Override public ParserRule getRule() { return rule; }
		
		//referredType=[types::Type|CHAN]
		public Assignment getReferredTypeAssignment() { return cReferredTypeAssignment; }
		
		//[types::Type|CHAN]
		public CrossReference getReferredTypeTypeCrossReference_0() { return cReferredTypeTypeCrossReference_0; }
		
		//CHAN
		public RuleCall getReferredTypeTypeCHANTerminalRuleCall_0_1() { return cReferredTypeTypeCHANTerminalRuleCall_0_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsLocalNonXmlDeclarationsParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block statements::Block:
		//	'{' declarations=LocalNonXmlDeclarations
		//	statement+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' declarations=LocalNonXmlDeclarations statement+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//declarations=LocalNonXmlDeclarations
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }
		
		//LocalNonXmlDeclarations
		public RuleCall getDeclarationsLocalNonXmlDeclarationsParserRuleCall_1_0() { return cDeclarationsLocalNonXmlDeclarationsParserRuleCall_1_0; }
		
		//statement+=Statement*
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIterationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileLoopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoWhileLoopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExpressionStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement statements::Statement:
		//	Block | EmptyStatement | ForLoop | Iteration | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement |
		//	ExpressionStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//Block | EmptyStatement | ForLoop | Iteration | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement |
		//ExpressionStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }
		
		//EmptyStatement
		public RuleCall getEmptyStatementParserRuleCall_1() { return cEmptyStatementParserRuleCall_1; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_2() { return cForLoopParserRuleCall_2; }
		
		//Iteration
		public RuleCall getIterationParserRuleCall_3() { return cIterationParserRuleCall_3; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_4() { return cWhileLoopParserRuleCall_4; }
		
		//DoWhileLoop
		public RuleCall getDoWhileLoopParserRuleCall_5() { return cDoWhileLoopParserRuleCall_5; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_6() { return cIfStatementParserRuleCall_6; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_7() { return cReturnStatementParserRuleCall_7; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_8() { return cExpressionStatementParserRuleCall_8; }
	}
	public class EmptyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.EmptyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyStatement statements::EmptyStatement:
		//	{statements::EmptyStatement}
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{statements::EmptyStatement} ';'
		public Group getGroup() { return cGroup; }
		
		//{statements::EmptyStatement}
		public Action getEmptyStatementAction_0() { return cEmptyStatementAction_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitializationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitializationExpressionParserRuleCall_2_0 = (RuleCall)cInitializationAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIterationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIterationExpressionParserRuleCall_6_0 = (RuleCall)cIterationAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementStatementParserRuleCall_8_0 = (RuleCall)cStatementAssignment_8.eContents().get(0);
		
		//ForLoop statements::ForLoop:
		//	'for' '(' initialization=Expression ';' condition=Expression ';' iteration=Expression ')'
		//	statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' initialization=Expression ';' condition=Expression ';' iteration=Expression ')' statement=Statement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initialization=Expression
		public Assignment getInitializationAssignment_2() { return cInitializationAssignment_2; }
		
		//Expression
		public RuleCall getInitializationExpressionParserRuleCall_2_0() { return cInitializationExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//iteration=Expression
		public Assignment getIterationAssignment_6() { return cIterationAssignment_6; }
		
		//Expression
		public RuleCall getIterationExpressionParserRuleCall_6_0() { return cIterationExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//statement=Statement
		public Assignment getStatementAssignment_8() { return cStatementAssignment_8; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_8_0() { return cStatementStatementParserRuleCall_8_0; }
	}
	public class IterationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Iteration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_4_0 = (RuleCall)cTypeDefinitionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		
		//Iteration statements::Iteration:
		//	'for' '(' variable+=Variable ':' typeDefinition=TypeDefinition ')' statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' variable+=Variable ':' typeDefinition=TypeDefinition ')' statement=Statement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_4() { return cTypeDefinitionAssignment_4; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_4_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//statement=Statement
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_6_0() { return cStatementStatementParserRuleCall_6_0; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//WhileLoop statements::WhileLoop:
		//	'while' '(' expression=Expression ')' statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' expression=Expression ')' statement=Statement
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}
	public class DoWhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.DoWhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DoWhileLoop statements::DoWhileLoop:
		//	'do' statement=Statement 'while' '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'do' statement=Statement 'while' '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfExpressionExpressionParserRuleCall_2_0 = (RuleCall)cIfExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementStatementParserRuleCall_4_0 = (RuleCall)cThenStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//IfStatement statements::IfStatement:
		//	'if' '(' ifExpression=Expression ')' thenStatement=Statement (=> 'else' elseStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' ifExpression=Expression ')' thenStatement=Statement (=> 'else' elseStatement=Statement)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ifExpression=Expression
		public Assignment getIfExpressionAssignment_2() { return cIfExpressionAssignment_2; }
		
		//Expression
		public RuleCall getIfExpressionExpressionParserRuleCall_2_0() { return cIfExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenStatement=Statement
		public Assignment getThenStatementAssignment_4() { return cThenStatementAssignment_4; }
		
		//Statement
		public RuleCall getThenStatementStatementParserRuleCall_4_0() { return cThenStatementStatementParserRuleCall_4_0; }
		
		//(=> 'else' elseStatement=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseStatement=Statement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }
		
		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_5_1_0() { return cElseStatementStatementParserRuleCall_5_1_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnExpressionExpressionParserRuleCall_2_0 = (RuleCall)cReturnExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement statements::ReturnStatement:
		//	{statements::ReturnStatement}
		//	'return' returnExpression=Expression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{statements::ReturnStatement} 'return' returnExpression=Expression? ';'
		public Group getGroup() { return cGroup; }
		
		//{statements::ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//returnExpression=Expression?
		public Assignment getReturnExpressionAssignment_2() { return cReturnExpressionAssignment_2; }
		
		//Expression
		public RuleCall getReturnExpressionExpressionParserRuleCall_2_0() { return cReturnExpressionExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionStatement statements::ExpressionStatement:
		//	expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Expression");
		private final RuleCall cQuantificationExpressionRParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression expressions::Expression:
		//	QuantificationExpressionR;
		@Override public ParserRule getRule() { return rule; }
		
		//QuantificationExpressionR
		public RuleCall getQuantificationExpressionRParserRuleCall() { return cQuantificationExpressionRParserRuleCall; }
	}
	public class QuantificationExpressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.QuantificationExpressionR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuantificationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QuantificationExpressionR expressions::Expression:
		//	AssignmentExpression | QuantificationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression | QuantificationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall_0() { return cAssignmentExpressionParserRuleCall_0; }
		
		//QuantificationExpression
		public RuleCall getQuantificationExpressionParserRuleCall_1() { return cQuantificationExpressionParserRuleCall_1; }
	}
	public class QuantificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.QuantificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantifierQuantifierEnumRuleCall_0_0 = (RuleCall)cQuantifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_4_0 = (RuleCall)cTypeDefinitionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		
		//// TODO: SUM?
		//QuantificationExpression expressions::QuantificationExpression:
		//	quantifier=Quantifier '(' variable+=Variable ':' typeDefinition=TypeDefinition ')' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//quantifier=Quantifier '(' variable+=Variable ':' typeDefinition=TypeDefinition ')' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//quantifier=Quantifier
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }
		
		//Quantifier
		public RuleCall getQuantifierQuantifierEnumRuleCall_0_0() { return cQuantifierQuantifierEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_4() { return cTypeDefinitionAssignment_4; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_4_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprAssignmentExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//AssignmentExpression expressions::Expression:
		//	ConditionExpression ({expressions::AssignmentExpression.firstExpr=current} operator=AssignmentOperator
		//	secondExpr=AssignmentExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionExpression ({expressions::AssignmentExpression.firstExpr=current} operator=AssignmentOperator
		//secondExpr=AssignmentExpression)?
		public Group getGroup() { return cGroup; }
		
		//ConditionExpression
		public RuleCall getConditionExpressionParserRuleCall_0() { return cConditionExpressionParserRuleCall_0; }
		
		//({expressions::AssignmentExpression.firstExpr=current} operator=AssignmentOperator secondExpr=AssignmentExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::AssignmentExpression.firstExpr=current}
		public Action getAssignmentExpressionFirstExprAction_1_0() { return cAssignmentExpressionFirstExprAction_1_0; }
		
		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorEnumRuleCall_1_1_0() { return cOperatorAssignmentOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=AssignmentExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//AssignmentExpression
		public RuleCall getSecondExprAssignmentExpressionParserRuleCall_1_2_0() { return cSecondExprAssignmentExpressionParserRuleCall_1_2_0; }
	}
	public class ConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ConditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionExpressionIfExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cThenExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElseExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElseExpressionConditionExpressionParserRuleCall_1_4_0 = (RuleCall)cElseExpressionAssignment_1_4.eContents().get(0);
		
		//ConditionExpression expressions::Expression:
		//	LogicalOrImpliesExpression ({expressions::ConditionExpression.ifExpression=current}
		//	'?' thenExpression=Expression => ':' elseExpression=ConditionExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrImpliesExpression ({expressions::ConditionExpression.ifExpression=current} '?' thenExpression=Expression => ':'
		//elseExpression=ConditionExpression)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOrImpliesExpression
		public RuleCall getLogicalOrImpliesExpressionParserRuleCall_0() { return cLogicalOrImpliesExpressionParserRuleCall_0; }
		
		//({expressions::ConditionExpression.ifExpression=current} '?' thenExpression=Expression => ':'
		//elseExpression=ConditionExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::ConditionExpression.ifExpression=current}
		public Action getConditionExpressionIfExpressionAction_1_0() { return cConditionExpressionIfExpressionAction_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//thenExpression=Expression
		public Assignment getThenExpressionAssignment_1_2() { return cThenExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getThenExpressionExpressionParserRuleCall_1_2_0() { return cThenExpressionExpressionParserRuleCall_1_2_0; }
		
		//=> ':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//elseExpression=ConditionExpression
		public Assignment getElseExpressionAssignment_1_4() { return cElseExpressionAssignment_1_4; }
		
		//ConditionExpression
		public RuleCall getElseExpressionConditionExpressionParserRuleCall_1_4_0() { return cElseExpressionConditionExpressionParserRuleCall_1_4_0; }
	}
	public class LogicalOrImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.LogicalOrImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalOrImpliesOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//LogicalOrImpliesExpression expressions::Expression:
		//	LogicalAndExpression ({expressions::LogicalExpression.firstExpr=current} operator=LogicalOrImpliesOperator
		//	secondExpr=LogicalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({expressions::LogicalExpression.firstExpr=current} operator=LogicalOrImpliesOperator
		//secondExpr=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({expressions::LogicalExpression.firstExpr=current} operator=LogicalOrImpliesOperator secondExpr=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::LogicalExpression.firstExpr=current}
		public Action getLogicalExpressionFirstExprAction_1_0() { return cLogicalExpressionFirstExprAction_1_0; }
		
		//operator=LogicalOrImpliesOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalOrImpliesOperator
		public RuleCall getOperatorLogicalOrImpliesOperatorEnumRuleCall_1_1_0() { return cOperatorLogicalOrImpliesOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=LogicalAndExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getSecondExprLogicalAndExpressionParserRuleCall_1_2_0() { return cSecondExprLogicalAndExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalAndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprInclusiveOrExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression expressions::Expression:
		//	InclusiveOrExpression ({expressions::LogicalExpression.firstExpr=current} operator=LogicalAndOperator
		//	secondExpr=InclusiveOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//InclusiveOrExpression ({expressions::LogicalExpression.firstExpr=current} operator=LogicalAndOperator
		//secondExpr=InclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//InclusiveOrExpression
		public RuleCall getInclusiveOrExpressionParserRuleCall_0() { return cInclusiveOrExpressionParserRuleCall_0; }
		
		//({expressions::LogicalExpression.firstExpr=current} operator=LogicalAndOperator secondExpr=InclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::LogicalExpression.firstExpr=current}
		public Action getLogicalExpressionFirstExprAction_1_0() { return cLogicalExpressionFirstExprAction_1_0; }
		
		//operator=LogicalAndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalAndOperator
		public RuleCall getOperatorLogicalAndOperatorEnumRuleCall_1_1_0() { return cOperatorLogicalAndOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=InclusiveOrExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//InclusiveOrExpression
		public RuleCall getSecondExprInclusiveOrExpressionParserRuleCall_1_2_0() { return cSecondExprInclusiveOrExpressionParserRuleCall_1_2_0; }
	}
	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorBitwiseOrOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprExclusiveOrExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//InclusiveOrExpression expressions::Expression:
		//	ExclusiveOrExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseOrOperator
		//	secondExpr=ExclusiveOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExclusiveOrExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseOrOperator
		//secondExpr=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//ExclusiveOrExpression
		public RuleCall getExclusiveOrExpressionParserRuleCall_0() { return cExclusiveOrExpressionParserRuleCall_0; }
		
		//({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseOrOperator secondExpr=ExclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::BitwiseExpression.firstExpr=current}
		public Action getBitwiseExpressionFirstExprAction_1_0() { return cBitwiseExpressionFirstExprAction_1_0; }
		
		//operator=BitwiseOrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//BitwiseOrOperator
		public RuleCall getOperatorBitwiseOrOperatorEnumRuleCall_1_1_0() { return cOperatorBitwiseOrOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=ExclusiveOrExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//ExclusiveOrExpression
		public RuleCall getSecondExprExclusiveOrExpressionParserRuleCall_1_2_0() { return cSecondExprExclusiveOrExpressionParserRuleCall_1_2_0; }
	}
	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorBitwiseXorOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprAndExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//ExclusiveOrExpression expressions::Expression:
		//	AndExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseXorOperator
		//	secondExpr=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseXorOperator secondExpr=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseXorOperator secondExpr=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::BitwiseExpression.firstExpr=current}
		public Action getBitwiseExpressionFirstExprAction_1_0() { return cBitwiseExpressionFirstExprAction_1_0; }
		
		//operator=BitwiseXorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//BitwiseXorOperator
		public RuleCall getOperatorBitwiseXorOperatorEnumRuleCall_1_1_0() { return cOperatorBitwiseXorOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=AndExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//AndExpression
		public RuleCall getSecondExprAndExpressionParserRuleCall_1_2_0() { return cSecondExprAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorBitwiseAndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//AndExpression expressions::Expression:
		//	EqualityExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseAndOperator
		//	secondExpr=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseAndOperator
		//secondExpr=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseAndOperator secondExpr=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::BitwiseExpression.firstExpr=current}
		public Action getBitwiseExpressionFirstExprAction_1_0() { return cBitwiseExpressionFirstExprAction_1_0; }
		
		//operator=BitwiseAndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//BitwiseAndOperator
		public RuleCall getOperatorBitwiseAndOperatorEnumRuleCall_1_1_0() { return cOperatorBitwiseAndOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=EqualityExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getSecondExprEqualityExpressionParserRuleCall_1_2_0() { return cSecondExprEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompareExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//EqualityExpression expressions::Expression:
		//	RelationalExpression ({expressions::CompareExpression.firstExpr=current} operator=EqualityOperator
		//	secondExpr=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({expressions::CompareExpression.firstExpr=current} operator=EqualityOperator
		//secondExpr=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({expressions::CompareExpression.firstExpr=current} operator=EqualityOperator secondExpr=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::CompareExpression.firstExpr=current}
		public Action getCompareExpressionFirstExprAction_1_0() { return cCompareExpressionFirstExprAction_1_0; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_1_0() { return cOperatorEqualityOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=RelationalExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getSecondExprRelationalExpressionParserRuleCall_1_2_0() { return cSecondExprRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMinMaxExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompareExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprMinMaxExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//RelationalExpression expressions::Expression:
		//	MinMaxExpression ({expressions::CompareExpression.firstExpr=current} operator=RelationalOperator
		//	secondExpr=MinMaxExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MinMaxExpression ({expressions::CompareExpression.firstExpr=current} operator=RelationalOperator
		//secondExpr=MinMaxExpression)*
		public Group getGroup() { return cGroup; }
		
		//MinMaxExpression
		public RuleCall getMinMaxExpressionParserRuleCall_0() { return cMinMaxExpressionParserRuleCall_0; }
		
		//({expressions::CompareExpression.firstExpr=current} operator=RelationalOperator secondExpr=MinMaxExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::CompareExpression.firstExpr=current}
		public Action getCompareExpressionFirstExprAction_1_0() { return cCompareExpressionFirstExprAction_1_0; }
		
		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=MinMaxExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//MinMaxExpression
		public RuleCall getSecondExprMinMaxExpressionParserRuleCall_1_2_0() { return cSecondExprMinMaxExpressionParserRuleCall_1_2_0; }
	}
	public class MinMaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.MinMaxExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMinMaxExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMinMaxOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprBitShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//MinMaxExpression expressions::Expression:
		//	BitShiftExpression ({expressions::MinMaxExpression.firstExpr=current} operator=MinMaxOperator
		//	secondExpr=BitShiftExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitShiftExpression ({expressions::MinMaxExpression.firstExpr=current} operator=MinMaxOperator
		//secondExpr=BitShiftExpression)*
		public Group getGroup() { return cGroup; }
		
		//BitShiftExpression
		public RuleCall getBitShiftExpressionParserRuleCall_0() { return cBitShiftExpressionParserRuleCall_0; }
		
		//({expressions::MinMaxExpression.firstExpr=current} operator=MinMaxOperator secondExpr=BitShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::MinMaxExpression.firstExpr=current}
		public Action getMinMaxExpressionFirstExprAction_1_0() { return cMinMaxExpressionFirstExprAction_1_0; }
		
		//operator=MinMaxOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MinMaxOperator
		public RuleCall getOperatorMinMaxOperatorEnumRuleCall_1_1_0() { return cOperatorMinMaxOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=BitShiftExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//BitShiftExpression
		public RuleCall getSecondExprBitShiftExpressionParserRuleCall_1_2_0() { return cSecondExprBitShiftExpressionParserRuleCall_1_2_0; }
	}
	public class BitShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.BitShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitShiftExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorBitShiftOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//BitShiftExpression expressions::Expression:
		//	AdditiveExpression ({expressions::BitShiftExpression.firstExpr=current} operator=BitShiftOperator
		//	secondExpr=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({expressions::BitShiftExpression.firstExpr=current} operator=BitShiftOperator
		//secondExpr=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({expressions::BitShiftExpression.firstExpr=current} operator=BitShiftOperator secondExpr=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::BitShiftExpression.firstExpr=current}
		public Action getBitShiftExpressionFirstExprAction_1_0() { return cBitShiftExpressionFirstExprAction_1_0; }
		
		//operator=BitShiftOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//BitShiftOperator
		public RuleCall getOperatorBitShiftOperatorEnumRuleCall_1_1_0() { return cOperatorBitShiftOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=AdditiveExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getSecondExprAdditiveExpressionParserRuleCall_1_2_0() { return cSecondExprAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class RatioExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.RatioExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstExprAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cFirstExprAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorRatioOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondExprAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cSecondExprAssignment_2.eContents().get(0);
		
		//RatioExpression expressions::ArithmeticExpression:
		//	firstExpr=AdditiveExpression operator=RatioOperator secondExpr=AdditiveExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//firstExpr=AdditiveExpression operator=RatioOperator secondExpr=AdditiveExpression
		public Group getGroup() { return cGroup; }
		
		//firstExpr=AdditiveExpression
		public Assignment getFirstExprAssignment_0() { return cFirstExprAssignment_0; }
		
		//AdditiveExpression
		public RuleCall getFirstExprAdditiveExpressionParserRuleCall_0_0() { return cFirstExprAdditiveExpressionParserRuleCall_0_0; }
		
		//operator=RatioOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//RatioOperator
		public RuleCall getOperatorRatioOperatorEnumRuleCall_1_0() { return cOperatorRatioOperatorEnumRuleCall_1_0; }
		
		//secondExpr=AdditiveExpression
		public Assignment getSecondExprAssignment_2() { return cSecondExprAssignment_2; }
		
		//AdditiveExpression
		public RuleCall getSecondExprAdditiveExpressionParserRuleCall_2_0() { return cSecondExprAdditiveExpressionParserRuleCall_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression expressions::Expression:
		//	MultiplicativeExpression ({expressions::ArithmeticExpression.firstExpr=current} operator=AdditiveOperator
		//	secondExpr=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({expressions::ArithmeticExpression.firstExpr=current} operator=AdditiveOperator
		//secondExpr=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({expressions::ArithmeticExpression.firstExpr=current} operator=AdditiveOperator secondExpr=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::ArithmeticExpression.firstExpr=current}
		public Action getArithmeticExpressionFirstExprAction_1_0() { return cArithmeticExpressionFirstExprAction_1_0; }
		
		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=MultiplicativeExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getSecondExprMultiplicativeExpressionParserRuleCall_1_2_0() { return cSecondExprMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionFirstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSecondExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSecondExprUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cSecondExprAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression expressions::Expression:
		//	UnaryExpression ({expressions::ArithmeticExpression.firstExpr=current} operator=MultiplicativeOperator
		//	secondExpr=UnaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({expressions::ArithmeticExpression.firstExpr=current} operator=MultiplicativeOperator
		//secondExpr=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({expressions::ArithmeticExpression.firstExpr=current} operator=MultiplicativeOperator secondExpr=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::ArithmeticExpression.firstExpr=current}
		public Action getArithmeticExpressionFirstExprAction_1_0() { return cArithmeticExpressionFirstExprAction_1_0; }
		
		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }
		
		//secondExpr=UnaryExpression
		public Assignment getSecondExprAssignment_1_2() { return cSecondExprAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getSecondExprUnaryExpressionParserRuleCall_1_2_0() { return cSecondExprUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNegationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlusExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMinusExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPostfixExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPreIncrementDecrementExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//UnaryExpression expressions::Expression:
		//	NegationExpression | PlusExpression | MinusExpression | PostfixExpression | PreIncrementDecrementExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NegationExpression | PlusExpression | MinusExpression | PostfixExpression | PreIncrementDecrementExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_0() { return cNegationExpressionParserRuleCall_0; }
		
		//PlusExpression
		public RuleCall getPlusExpressionParserRuleCall_1() { return cPlusExpressionParserRuleCall_1; }
		
		//MinusExpression
		public RuleCall getMinusExpressionParserRuleCall_2() { return cMinusExpressionParserRuleCall_2; }
		
		//PostfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_3() { return cPostfixExpressionParserRuleCall_3; }
		
		//PreIncrementDecrementExpression
		public RuleCall getPreIncrementDecrementExpressionParserRuleCall_4() { return cPreIncrementDecrementExpressionParserRuleCall_4; }
	}
	public class NegationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.NegationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNegatedExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNegatedExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cNegatedExpressionAssignment_1.eContents().get(0);
		
		//NegationExpression expressions::NegationExpression:
		//	('!' | 'not') negatedExpression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//('!' | 'not') negatedExpression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//'!' | 'not'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//negatedExpression=UnaryExpression
		public Assignment getNegatedExpressionAssignment_1() { return cNegatedExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getNegatedExpressionUnaryExpressionParserRuleCall_1_0() { return cNegatedExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class PlusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.PlusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfirmedExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfirmedExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cConfirmedExpressionAssignment_1.eContents().get(0);
		
		//PlusExpression expressions::PlusExpression:
		//	'+' confirmedExpression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' confirmedExpression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//confirmedExpression=UnaryExpression
		public Assignment getConfirmedExpressionAssignment_1() { return cConfirmedExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getConfirmedExpressionUnaryExpressionParserRuleCall_1_0() { return cConfirmedExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class MinusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.MinusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvertedExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvertedExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cInvertedExpressionAssignment_1.eContents().get(0);
		
		//MinusExpression expressions::MinusExpression:
		//	'-' invertedExpression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' invertedExpression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//invertedExpression=UnaryExpression
		public Assignment getInvertedExpressionAssignment_1() { return cInvertedExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getInvertedExpressionUnaryExpressionParserRuleCall_1_0() { return cInvertedExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cScopedIdentifierExpressionScopeAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cIdentifierAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cIdentifierIdentifierExpressionParserRuleCall_1_0_2_0 = (RuleCall)cIdentifierAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPostIncrementDecrementExpressionExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorIncrementDecrementOperatorEnumRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		
		//PostfixExpression expressions::Expression:
		//	PrimaryExpression ({expressions::ScopedIdentifierExpression.scope=current}
		//	'.' identifier=IdentifierExpression | {expressions::PostIncrementDecrementExpression.expression=current}
		//	operator=IncrementDecrementOperator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({expressions::ScopedIdentifierExpression.scope=current} '.' identifier=IdentifierExpression |
		//{expressions::PostIncrementDecrementExpression.expression=current} operator=IncrementDecrementOperator)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({expressions::ScopedIdentifierExpression.scope=current} '.' identifier=IdentifierExpression |
		//{expressions::PostIncrementDecrementExpression.expression=current} operator=IncrementDecrementOperator)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{expressions::ScopedIdentifierExpression.scope=current} '.' identifier=IdentifierExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{expressions::ScopedIdentifierExpression.scope=current}
		public Action getScopedIdentifierExpressionScopeAction_1_0_0() { return cScopedIdentifierExpressionScopeAction_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//identifier=IdentifierExpression
		public Assignment getIdentifierAssignment_1_0_2() { return cIdentifierAssignment_1_0_2; }
		
		//IdentifierExpression
		public RuleCall getIdentifierIdentifierExpressionParserRuleCall_1_0_2_0() { return cIdentifierIdentifierExpressionParserRuleCall_1_0_2_0; }
		
		//{expressions::PostIncrementDecrementExpression.expression=current} operator=IncrementDecrementOperator
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{expressions::PostIncrementDecrementExpression.expression=current}
		public Action getPostIncrementDecrementExpressionExpressionAction_1_1_0() { return cPostIncrementDecrementExpressionExpressionAction_1_1_0; }
		
		//operator=IncrementDecrementOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//IncrementDecrementOperator
		public RuleCall getOperatorIncrementDecrementOperatorEnumRuleCall_1_1_1_0() { return cOperatorIncrementDecrementOperatorEnumRuleCall_1_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionCallExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLiteralExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cTextAlternatives_3_1_0 = (Alternatives)cTextAssignment_3_1.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_1_0_0 = (RuleCall)cTextAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cTextINT_STRTerminalRuleCall_3_1_0_1 = (RuleCall)cTextAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cTextDOUBLE_STRTerminalRuleCall_3_1_0_2 = (RuleCall)cTextAlternatives_3_1_0.eContents().get(2);
		private final Keyword cTextTrueKeyword_3_1_0_3 = (Keyword)cTextAlternatives_3_1_0.eContents().get(3);
		private final Keyword cTextFalseKeyword_3_1_0_4 = (Keyword)cTextAlternatives_3_1_0.eContents().get(4);
		
		//PrimaryExpression expressions::Expression:
		//	=> FunctionCallExpression | IdentifierExpression | '(' Expression ')' | {expressions::LiteralExpression} text=(STRING
		//	| INT_STR | DOUBLE_STR | "true" | "false");
		@Override public ParserRule getRule() { return rule; }
		
		//=> FunctionCallExpression | IdentifierExpression | '(' Expression ')' | {expressions::LiteralExpression} text=(STRING |
		//INT_STR | DOUBLE_STR | "true" | "false")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> FunctionCallExpression
		public RuleCall getFunctionCallExpressionParserRuleCall_0() { return cFunctionCallExpressionParserRuleCall_0; }
		
		//IdentifierExpression
		public RuleCall getIdentifierExpressionParserRuleCall_1() { return cIdentifierExpressionParserRuleCall_1; }
		
		//'(' Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//{expressions::LiteralExpression} text=(STRING | INT_STR | DOUBLE_STR | "true" | "false")
		public Group getGroup_3() { return cGroup_3; }
		
		//{expressions::LiteralExpression}
		public Action getLiteralExpressionAction_3_0() { return cLiteralExpressionAction_3_0; }
		
		//text=(STRING | INT_STR | DOUBLE_STR | "true" | "false")
		public Assignment getTextAssignment_3_1() { return cTextAssignment_3_1; }
		
		//(STRING | INT_STR | DOUBLE_STR | "true" | "false")
		public Alternatives getTextAlternatives_3_1_0() { return cTextAlternatives_3_1_0; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_1_0_0() { return cTextSTRINGTerminalRuleCall_3_1_0_0; }
		
		//INT_STR
		public RuleCall getTextINT_STRTerminalRuleCall_3_1_0_1() { return cTextINT_STRTerminalRuleCall_3_1_0_1; }
		
		//DOUBLE_STR
		public RuleCall getTextDOUBLE_STRTerminalRuleCall_3_1_0_2() { return cTextDOUBLE_STRTerminalRuleCall_3_1_0_2; }
		
		//"true"
		public Keyword getTextTrueKeyword_3_1_0_3() { return cTextTrueKeyword_3_1_0_3; }
		
		//"false"
		public Keyword getTextFalseKeyword_3_1_0_4() { return cTextFalseKeyword_3_1_0_4; }
	}
	public class FunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.FunctionCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCallExpression expressions::FunctionCallExpression:
		//	function=[declarations::Function]
		//	'(' (argument+=Expression ("," argument+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//function=[declarations::Function] '(' (argument+=Expression ("," argument+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//function=[declarations::Function]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[declarations::Function]
		public CrossReference getFunctionFunctionCrossReference_0_0() { return cFunctionFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(argument+=Expression ("," argument+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_2_0() { return cArgumentAssignment_2_0; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_0_0() { return cArgumentExpressionParserRuleCall_2_0_0; }
		
		//("," argument+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_2_1_1() { return cArgumentAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_1_1_0() { return cArgumentExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IdentifierExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.IdentifierExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdentifierNamedElementCrossReference_0_0 = (CrossReference)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cIdentifierNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cIdentifierNamedElementCrossReference_0_0.eContents().get(1);
		private final Assignment cClockRateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cClockRateApostropheKeyword_1_0 = (Keyword)cClockRateAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexExpressionParserRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cIndexAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_2_2_2_0 = (RuleCall)cIndexAssignment_2_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//IdentifierExpression expressions::IdentifierExpression:
		//	identifier=[core::NamedElement] clockRate?="'"? ('[' index+=Expression ("]" "[" index+=Expression)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=[core::NamedElement] clockRate?="'"? ('[' index+=Expression ("]" "[" index+=Expression)* ']')?
		public Group getGroup() { return cGroup; }
		
		//identifier=[core::NamedElement]
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//[core::NamedElement]
		public CrossReference getIdentifierNamedElementCrossReference_0_0() { return cIdentifierNamedElementCrossReference_0_0; }
		
		//ID
		public RuleCall getIdentifierNamedElementIDTerminalRuleCall_0_0_1() { return cIdentifierNamedElementIDTerminalRuleCall_0_0_1; }
		
		//clockRate?="'"?
		public Assignment getClockRateAssignment_1() { return cClockRateAssignment_1; }
		
		//"'"
		public Keyword getClockRateApostropheKeyword_1_0() { return cClockRateApostropheKeyword_1_0; }
		
		//('[' index+=Expression ("]" "[" index+=Expression)* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//index+=Expression
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_2_1_0() { return cIndexExpressionParserRuleCall_2_1_0; }
		
		//("]" "[" index+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2_0() { return cRightSquareBracketKeyword_2_2_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_2_1() { return cLeftSquareBracketKeyword_2_2_1; }
		
		//index+=Expression
		public Assignment getIndexAssignment_2_2_2() { return cIndexAssignment_2_2_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_2_2_2_0() { return cIndexExpressionParserRuleCall_2_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}
	public class PreIncrementDecrementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.PreIncrementDecrementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorIncrementDecrementOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//PreIncrementDecrementExpression expressions::PreIncrementDecrementExpression:
		//	operator=IncrementDecrementOperator expression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=IncrementDecrementOperator expression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//operator=IncrementDecrementOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//IncrementDecrementOperator
		public RuleCall getOperatorIncrementDecrementOperatorEnumRuleCall_0_0() { return cOperatorIncrementDecrementOperatorEnumRuleCall_0_0; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	
	public class DataVariablePrefixElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.DataVariablePrefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCONSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCONSTConstKeyword_0_0 = (Keyword)cCONSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMETAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMETAMetaKeyword_1_0 = (Keyword)cMETAEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DataVariablePrefix returns declarations::DataVariablePrefix:
		//	CONST='const' | META='meta';
		public EnumRule getRule() { return rule; }
		
		//CONST='const' | META='meta'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CONST='const'
		public EnumLiteralDeclaration getCONSTEnumLiteralDeclaration_0() { return cCONSTEnumLiteralDeclaration_0; }
		
		//'const'
		public Keyword getCONSTConstKeyword_0_0() { return cCONSTConstKeyword_0_0; }
		
		//META='meta'
		public EnumLiteralDeclaration getMETAEnumLiteralDeclaration_1() { return cMETAEnumLiteralDeclaration_1; }
		
		//'meta'
		public Keyword getMETAMetaKeyword_1_0() { return cMETAMetaKeyword_1_0; }
	}
	public class CallByValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.CallByValue");
		private final EnumLiteralDeclaration cCALL_BY_VALUEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCALL_BY_VALUECALL_BY_VALUEKeyword_0 = (Keyword)cCALL_BY_VALUEEnumLiteralDeclaration.eContents().get(0);
		
		//enum CallByValue returns declarations::CallType:
		//	CALL_BY_VALUE;
		public EnumRule getRule() { return rule; }
		
		//CALL_BY_VALUE
		public EnumLiteralDeclaration getCALL_BY_VALUEEnumLiteralDeclaration() { return cCALL_BY_VALUEEnumLiteralDeclaration; }
		
		//"CALL_BY_VALUE"
		public Keyword getCALL_BY_VALUECALL_BY_VALUEKeyword_0() { return cCALL_BY_VALUECALL_BY_VALUEKeyword_0; }
	}
	public class CallByReferenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.CallByReference");
		private final EnumLiteralDeclaration cCALL_BY_REFERENCEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCALL_BY_REFERENCECALL_BY_REFERENCEKeyword_0 = (Keyword)cCALL_BY_REFERENCEEnumLiteralDeclaration.eContents().get(0);
		
		//enum CallByReference returns declarations::CallType:
		//	CALL_BY_REFERENCE;
		public EnumRule getRule() { return rule; }
		
		//CALL_BY_REFERENCE
		public EnumLiteralDeclaration getCALL_BY_REFERENCEEnumLiteralDeclaration() { return cCALL_BY_REFERENCEEnumLiteralDeclaration; }
		
		//"CALL_BY_REFERENCE"
		public Keyword getCALL_BY_REFERENCECALL_BY_REFERENCEKeyword_0() { return cCALL_BY_REFERENCECALL_BY_REFERENCEKeyword_0; }
	}
	public class LocationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.LocationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cURGENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cURGENTUrgentKeyword_0_0 = (Keyword)cURGENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMMITEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMMITEDCommittedKeyword_1_0 = (Keyword)cCOMMITEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LocationKind returns templates::LocationKind:
		//	URGENT='<urgent/>' | COMMITED='<committed/>';
		public EnumRule getRule() { return rule; }
		
		//URGENT='<urgent/>' | COMMITED='<committed/>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//URGENT='<urgent/>'
		public EnumLiteralDeclaration getURGENTEnumLiteralDeclaration_0() { return cURGENTEnumLiteralDeclaration_0; }
		
		//'<urgent/>'
		public Keyword getURGENTUrgentKeyword_0_0() { return cURGENTUrgentKeyword_0_0; }
		
		//COMMITED='<committed/>'
		public EnumLiteralDeclaration getCOMMITEDEnumLiteralDeclaration_1() { return cCOMMITEDEnumLiteralDeclaration_1; }
		
		//'<committed/>'
		public Keyword getCOMMITEDCommittedKeyword_1_0() { return cCOMMITEDCommittedKeyword_1_0; }
	}
	public class SynchronizationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.SynchronizationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRECEIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRECEIVEQuestionMarkKeyword_0_0 = (Keyword)cRECEIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSENDExclamationMarkKeyword_1_0 = (Keyword)cSENDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SynchronizationKind returns templates::SynchronizationKind:
		//	RECEIVE='?' | SEND='!';
		public EnumRule getRule() { return rule; }
		
		//RECEIVE='?' | SEND='!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RECEIVE='?'
		public EnumLiteralDeclaration getRECEIVEEnumLiteralDeclaration_0() { return cRECEIVEEnumLiteralDeclaration_0; }
		
		//'?'
		public Keyword getRECEIVEQuestionMarkKeyword_0_0() { return cRECEIVEQuestionMarkKeyword_0_0; }
		
		//SEND='!'
		public EnumLiteralDeclaration getSENDEnumLiteralDeclaration_1() { return cSENDEnumLiteralDeclaration_1; }
		
		//'!'
		public Keyword getSENDExclamationMarkKeyword_1_0() { return cSENDExclamationMarkKeyword_1_0; }
	}
	public class ColorKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.ColorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDEFAULTKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWHITEWHITEKeyword_1_0 = (Keyword)cWHITEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHTGREYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLIGHTGREYLIGHTGREYKeyword_2_0 = (Keyword)cLIGHTGREYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDARKGREYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDARKGREYDARKGREYKeyword_3_0 = (Keyword)cDARKGREYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBLACKBLACKKeyword_4_0 = (Keyword)cBLACKEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBLUEBLUEKeyword_5_0 = (Keyword)cBLUEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCYANEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCYANCYANKeyword_6_0 = (Keyword)cCYANEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGREENGREENKeyword_7_0 = (Keyword)cGREENEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMAGENTAEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMAGENTAMAGENTAKeyword_8_0 = (Keyword)cMAGENTAEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cORANGEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cORANGEORANGEKeyword_9_0 = (Keyword)cORANGEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPINKEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPINKPINKKeyword_10_0 = (Keyword)cPINKEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cREDREDKeyword_11_0 = (Keyword)cREDEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cYELLOWYELLOWKeyword_12_0 = (Keyword)cYELLOWEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cSELF_DEFINEDEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cSELF_DEFINEDSELF_DEFINEDKeyword_13_0 = (Keyword)cSELF_DEFINEDEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum ColorKind returns visuals::ColorKind:
		//	DEFAULT | WHITE | LIGHTGREY |
		//	DARKGREY | BLACK | BLUE | CYAN |
		//	GREEN | MAGENTA | ORANGE | PINK |
		//	RED | YELLOW | SELF_DEFINED;
		public EnumRule getRule() { return rule; }
		
		//DEFAULT | WHITE | LIGHTGREY | DARKGREY | BLACK | BLUE | CYAN | GREEN | MAGENTA | ORANGE | PINK | RED | YELLOW |
		//SELF_DEFINED
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DEFAULT
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }
		
		//'DEFAULT'
		public Keyword getDEFAULTDEFAULTKeyword_0_0() { return cDEFAULTDEFAULTKeyword_0_0; }
		
		//WHITE
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_1() { return cWHITEEnumLiteralDeclaration_1; }
		
		//'WHITE'
		public Keyword getWHITEWHITEKeyword_1_0() { return cWHITEWHITEKeyword_1_0; }
		
		//LIGHTGREY
		public EnumLiteralDeclaration getLIGHTGREYEnumLiteralDeclaration_2() { return cLIGHTGREYEnumLiteralDeclaration_2; }
		
		//'LIGHTGREY'
		public Keyword getLIGHTGREYLIGHTGREYKeyword_2_0() { return cLIGHTGREYLIGHTGREYKeyword_2_0; }
		
		//DARKGREY
		public EnumLiteralDeclaration getDARKGREYEnumLiteralDeclaration_3() { return cDARKGREYEnumLiteralDeclaration_3; }
		
		//'DARKGREY'
		public Keyword getDARKGREYDARKGREYKeyword_3_0() { return cDARKGREYDARKGREYKeyword_3_0; }
		
		//BLACK
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_4() { return cBLACKEnumLiteralDeclaration_4; }
		
		//'BLACK'
		public Keyword getBLACKBLACKKeyword_4_0() { return cBLACKBLACKKeyword_4_0; }
		
		//BLUE
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_5() { return cBLUEEnumLiteralDeclaration_5; }
		
		//'BLUE'
		public Keyword getBLUEBLUEKeyword_5_0() { return cBLUEBLUEKeyword_5_0; }
		
		//CYAN
		public EnumLiteralDeclaration getCYANEnumLiteralDeclaration_6() { return cCYANEnumLiteralDeclaration_6; }
		
		//'CYAN'
		public Keyword getCYANCYANKeyword_6_0() { return cCYANCYANKeyword_6_0; }
		
		//GREEN
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_7() { return cGREENEnumLiteralDeclaration_7; }
		
		//'GREEN'
		public Keyword getGREENGREENKeyword_7_0() { return cGREENGREENKeyword_7_0; }
		
		//MAGENTA
		public EnumLiteralDeclaration getMAGENTAEnumLiteralDeclaration_8() { return cMAGENTAEnumLiteralDeclaration_8; }
		
		//'MAGENTA'
		public Keyword getMAGENTAMAGENTAKeyword_8_0() { return cMAGENTAMAGENTAKeyword_8_0; }
		
		//ORANGE
		public EnumLiteralDeclaration getORANGEEnumLiteralDeclaration_9() { return cORANGEEnumLiteralDeclaration_9; }
		
		//'ORANGE'
		public Keyword getORANGEORANGEKeyword_9_0() { return cORANGEORANGEKeyword_9_0; }
		
		//PINK
		public EnumLiteralDeclaration getPINKEnumLiteralDeclaration_10() { return cPINKEnumLiteralDeclaration_10; }
		
		//'PINK'
		public Keyword getPINKPINKKeyword_10_0() { return cPINKPINKKeyword_10_0; }
		
		//RED
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_11() { return cREDEnumLiteralDeclaration_11; }
		
		//'RED'
		public Keyword getREDREDKeyword_11_0() { return cREDREDKeyword_11_0; }
		
		//YELLOW
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_12() { return cYELLOWEnumLiteralDeclaration_12; }
		
		//'YELLOW'
		public Keyword getYELLOWYELLOWKeyword_12_0() { return cYELLOWYELLOWKeyword_12_0; }
		
		//SELF_DEFINED
		public EnumLiteralDeclaration getSELF_DEFINEDEnumLiteralDeclaration_13() { return cSELF_DEFINEDEnumLiteralDeclaration_13; }
		
		//'SELF_DEFINED'
		public Keyword getSELF_DEFINEDSELF_DEFINEDKeyword_13_0() { return cSELF_DEFINEDSELF_DEFINEDKeyword_13_0; }
	}
	public class QuantifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEXISTENTIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEXISTENTIALExistsKeyword_0_0 = (Keyword)cEXISTENTIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNIVERSALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNIVERSALForallKeyword_1_0 = (Keyword)cUNIVERSALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Quantifier returns expressions::Quantifier:
		//	EXISTENTIAL='exists' | UNIVERSAL='forall';
		public EnumRule getRule() { return rule; }
		
		//EXISTENTIAL='exists' | UNIVERSAL='forall'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EXISTENTIAL='exists'
		public EnumLiteralDeclaration getEXISTENTIALEnumLiteralDeclaration_0() { return cEXISTENTIALEnumLiteralDeclaration_0; }
		
		//'exists'
		public Keyword getEXISTENTIALExistsKeyword_0_0() { return cEXISTENTIALExistsKeyword_0_0; }
		
		//UNIVERSAL='forall'
		public EnumLiteralDeclaration getUNIVERSALEnumLiteralDeclaration_1() { return cUNIVERSALEnumLiteralDeclaration_1; }
		
		//'forall'
		public Keyword getUNIVERSALForallKeyword_1_0() { return cUNIVERSALForallKeyword_1_0; }
	}
	public class AssignmentOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUALColonEqualsSignKeyword_1_0 = (Keyword)cEQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPLUS_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPLUS_EQUALPlusSignEqualsSignKeyword_2_0 = (Keyword)cPLUS_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMINUS_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMINUS_EQUALHyphenMinusEqualsSignKeyword_3_0 = (Keyword)cMINUS_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTIMES_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTIMES_EQUALAsteriskEqualsSignKeyword_4_0 = (Keyword)cTIMES_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDE_EQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDIVIDE_EQUALSolidusEqualsSignKeyword_5_0 = (Keyword)cDIVIDE_EQUALEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cMODULO_EQUALEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cMODULO_EQUALPercentSignEqualsSignKeyword_6_0 = (Keyword)cMODULO_EQUALEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_AND_EQUALEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBIT_AND_EQUALAmpKeyword_7_0 = (Keyword)cBIT_AND_EQUALEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_OR_EQUALEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBIT_OR_EQUALVerticalLineEqualsSignKeyword_8_0 = (Keyword)cBIT_OR_EQUALEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_LEFT_EQUALEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBIT_LEFT_EQUALLtLtKeyword_9_0 = (Keyword)cBIT_LEFT_EQUALEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_RIGHT_EQUALEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cBIT_RIGHT_EQUALGtGtKeyword_10_0 = (Keyword)cBIT_RIGHT_EQUALEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_XOR_EQUALEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cBIT_XOR_EQUALCircumflexAccentEqualsSignKeyword_11_0 = (Keyword)cBIT_XOR_EQUALEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum AssignmentOperator returns expressions::AssignmentOperator:
		//	EQUAL='=' | EQUAL=':=' | PLUS_EQUAL='+=' | MINUS_EQUAL='-=' |
		//	TIMES_EQUAL='*=' | DIVIDE_EQUAL='/=' | MODULO_EQUAL='%=' |
		//	BIT_AND_EQUAL='&amp;=' | BIT_OR_EQUAL='|=' | BIT_LEFT_EQUAL='&lt;&lt;=' |
		//	BIT_RIGHT_EQUAL='&gt;&gt;=' | BIT_XOR_EQUAL='^=';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | EQUAL=':=' | PLUS_EQUAL='+=' | MINUS_EQUAL='-=' | TIMES_EQUAL='*=' | DIVIDE_EQUAL='/=' | MODULO_EQUAL='%=' |
		//BIT_AND_EQUAL='&amp;=' | BIT_OR_EQUAL='|=' | BIT_LEFT_EQUAL='&lt;&lt;=' | BIT_RIGHT_EQUAL='&gt;&gt;=' |
		//BIT_XOR_EQUAL='^='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//EQUAL=':='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_1() { return cEQUALEnumLiteralDeclaration_1; }
		
		//':='
		public Keyword getEQUALColonEqualsSignKeyword_1_0() { return cEQUALColonEqualsSignKeyword_1_0; }
		
		//PLUS_EQUAL='+='
		public EnumLiteralDeclaration getPLUS_EQUALEnumLiteralDeclaration_2() { return cPLUS_EQUALEnumLiteralDeclaration_2; }
		
		//'+='
		public Keyword getPLUS_EQUALPlusSignEqualsSignKeyword_2_0() { return cPLUS_EQUALPlusSignEqualsSignKeyword_2_0; }
		
		//MINUS_EQUAL='-='
		public EnumLiteralDeclaration getMINUS_EQUALEnumLiteralDeclaration_3() { return cMINUS_EQUALEnumLiteralDeclaration_3; }
		
		//'-='
		public Keyword getMINUS_EQUALHyphenMinusEqualsSignKeyword_3_0() { return cMINUS_EQUALHyphenMinusEqualsSignKeyword_3_0; }
		
		//TIMES_EQUAL='*='
		public EnumLiteralDeclaration getTIMES_EQUALEnumLiteralDeclaration_4() { return cTIMES_EQUALEnumLiteralDeclaration_4; }
		
		//'*='
		public Keyword getTIMES_EQUALAsteriskEqualsSignKeyword_4_0() { return cTIMES_EQUALAsteriskEqualsSignKeyword_4_0; }
		
		//DIVIDE_EQUAL='/='
		public EnumLiteralDeclaration getDIVIDE_EQUALEnumLiteralDeclaration_5() { return cDIVIDE_EQUALEnumLiteralDeclaration_5; }
		
		//'/='
		public Keyword getDIVIDE_EQUALSolidusEqualsSignKeyword_5_0() { return cDIVIDE_EQUALSolidusEqualsSignKeyword_5_0; }
		
		//MODULO_EQUAL='%='
		public EnumLiteralDeclaration getMODULO_EQUALEnumLiteralDeclaration_6() { return cMODULO_EQUALEnumLiteralDeclaration_6; }
		
		//'%='
		public Keyword getMODULO_EQUALPercentSignEqualsSignKeyword_6_0() { return cMODULO_EQUALPercentSignEqualsSignKeyword_6_0; }
		
		//BIT_AND_EQUAL='&amp;='
		public EnumLiteralDeclaration getBIT_AND_EQUALEnumLiteralDeclaration_7() { return cBIT_AND_EQUALEnumLiteralDeclaration_7; }
		
		//'&amp;='
		public Keyword getBIT_AND_EQUALAmpKeyword_7_0() { return cBIT_AND_EQUALAmpKeyword_7_0; }
		
		//BIT_OR_EQUAL='|='
		public EnumLiteralDeclaration getBIT_OR_EQUALEnumLiteralDeclaration_8() { return cBIT_OR_EQUALEnumLiteralDeclaration_8; }
		
		//'|='
		public Keyword getBIT_OR_EQUALVerticalLineEqualsSignKeyword_8_0() { return cBIT_OR_EQUALVerticalLineEqualsSignKeyword_8_0; }
		
		//BIT_LEFT_EQUAL='&lt;&lt;='
		public EnumLiteralDeclaration getBIT_LEFT_EQUALEnumLiteralDeclaration_9() { return cBIT_LEFT_EQUALEnumLiteralDeclaration_9; }
		
		//'&lt;&lt;='
		public Keyword getBIT_LEFT_EQUALLtLtKeyword_9_0() { return cBIT_LEFT_EQUALLtLtKeyword_9_0; }
		
		//BIT_RIGHT_EQUAL='&gt;&gt;='
		public EnumLiteralDeclaration getBIT_RIGHT_EQUALEnumLiteralDeclaration_10() { return cBIT_RIGHT_EQUALEnumLiteralDeclaration_10; }
		
		//'&gt;&gt;='
		public Keyword getBIT_RIGHT_EQUALGtGtKeyword_10_0() { return cBIT_RIGHT_EQUALGtGtKeyword_10_0; }
		
		//BIT_XOR_EQUAL='^='
		public EnumLiteralDeclaration getBIT_XOR_EQUALEnumLiteralDeclaration_11() { return cBIT_XOR_EQUALEnumLiteralDeclaration_11; }
		
		//'^='
		public Keyword getBIT_XOR_EQUALCircumflexAccentEqualsSignKeyword_11_0() { return cBIT_XOR_EQUALCircumflexAccentEqualsSignKeyword_11_0; }
	}
	public class LogicalOrImpliesOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.LogicalOrImpliesOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOROrKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIMPLYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIMPLYImplyKeyword_2_0 = (Keyword)cIMPLYEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum LogicalOrImpliesOperator returns expressions::LogicalOperator:
		//	OR='or' | OR='||' | IMPLY='imply';
		public EnumRule getRule() { return rule; }
		
		//OR='or' | OR='||' | IMPLY='imply'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }
		
		//'or'
		public Keyword getOROrKeyword_0_0() { return cOROrKeyword_0_0; }
		
		//OR='||'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'||'
		public Keyword getORVerticalLineVerticalLineKeyword_1_0() { return cORVerticalLineVerticalLineKeyword_1_0; }
		
		//IMPLY='imply'
		public EnumLiteralDeclaration getIMPLYEnumLiteralDeclaration_2() { return cIMPLYEnumLiteralDeclaration_2; }
		
		//'imply'
		public Keyword getIMPLYImplyKeyword_2_0() { return cIMPLYImplyKeyword_2_0; }
	}
	public class LogicalAndOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.LogicalAndOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANDAmpAmpKeyword_1_0 = (Keyword)cANDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicalAndOperator returns expressions::LogicalOperator:
		//	AND='and' | AND='&amp;&amp;';
		public EnumRule getRule() { return rule; }
		
		//AND='and' | AND='&amp;&amp;'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'and'
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }
		
		//AND='&amp;&amp;'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_1() { return cANDEnumLiteralDeclaration_1; }
		
		//'&amp;&amp;'
		public Keyword getANDAmpAmpKeyword_1_0() { return cANDAmpAmpKeyword_1_0; }
	}
	public class BitwiseOrOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.BitwiseOrOperator");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		//enum BitwiseOrOperator returns expressions::BitwiseOperator:
		//	OR='|';
		public EnumRule getRule() { return rule; }
		
		//OR='|'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }
		
		//'|'
		public Keyword getORVerticalLineKeyword_0() { return cORVerticalLineKeyword_0; }
	}
	public class BitwiseXorOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.BitwiseXorOperator");
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cXORCircumflexAccentKeyword_0 = (Keyword)cXOREnumLiteralDeclaration.eContents().get(0);
		
		//enum BitwiseXorOperator returns expressions::BitwiseOperator:
		//	XOR='^';
		public EnumRule getRule() { return rule; }
		
		//XOR='^'
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration() { return cXOREnumLiteralDeclaration; }
		
		//'^'
		public Keyword getXORCircumflexAccentKeyword_0() { return cXORCircumflexAccentKeyword_0; }
	}
	public class BitwiseAndOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.BitwiseAndOperator");
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cANDAmpKeyword_0 = (Keyword)cANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum BitwiseAndOperator returns expressions::BitwiseOperator:
		//	AND='&amp;';
		public EnumRule getRule() { return rule; }
		
		//AND='&amp;'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration() { return cANDEnumLiteralDeclaration; }
		
		//'&amp;'
		public Keyword getANDAmpKeyword_0() { return cANDAmpKeyword_0; }
	}
	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNEQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNEQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cUNEQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator returns expressions::CompareOperator:
		//	EQUAL='==' | UNEQUAL='!=';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='==' | UNEQUAL='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='=='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }
		
		//UNEQUAL='!='
		public EnumLiteralDeclaration getUNEQUALEnumLiteralDeclaration_1() { return cUNEQUALEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getUNEQUALExclamationMarkEqualsSignKeyword_1_0() { return cUNEQUALExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREATERGtKeyword_0_0 = (Keyword)cGREATEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATER_OR_EQUALGtKeyword_1_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSLtKeyword_2_0 = (Keyword)cLESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESS_OR_EQUALLtKeyword_3_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RelationalOperator returns expressions::CompareOperator:
		//	GREATER='&gt;' | GREATER_OR_EQUAL='&gt;=' |
		//	LESS='&lt;' | LESS_OR_EQUAL='&lt;=';
		public EnumRule getRule() { return rule; }
		
		//GREATER='&gt;' | GREATER_OR_EQUAL='&gt;=' | LESS='&lt;' | LESS_OR_EQUAL='&lt;='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GREATER='&gt;'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() { return cGREATEREnumLiteralDeclaration_0; }
		
		//'&gt;'
		public Keyword getGREATERGtKeyword_0_0() { return cGREATERGtKeyword_0_0; }
		
		//GREATER_OR_EQUAL='&gt;='
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_1() { return cGREATER_OR_EQUALEnumLiteralDeclaration_1; }
		
		//'&gt;='
		public Keyword getGREATER_OR_EQUALGtKeyword_1_0() { return cGREATER_OR_EQUALGtKeyword_1_0; }
		
		//LESS='&lt;'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_2() { return cLESSEnumLiteralDeclaration_2; }
		
		//'&lt;'
		public Keyword getLESSLtKeyword_2_0() { return cLESSLtKeyword_2_0; }
		
		//LESS_OR_EQUAL='&lt;='
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_3() { return cLESS_OR_EQUALEnumLiteralDeclaration_3; }
		
		//'&lt;='
		public Keyword getLESS_OR_EQUALLtKeyword_3_0() { return cLESS_OR_EQUALLtKeyword_3_0; }
	}
	public class MinMaxOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.MinMaxOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINLtKeyword_0_0 = (Keyword)cMINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMAXGtKeyword_1_0 = (Keyword)cMAXEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MinMaxOperator returns expressions::MinMaxOperator:
		//	MIN='&lt;?' | MAX='&gt;?';
		public EnumRule getRule() { return rule; }
		
		//MIN='&lt;?' | MAX='&gt;?'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MIN='&lt;?'
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_0() { return cMINEnumLiteralDeclaration_0; }
		
		//'&lt;?'
		public Keyword getMINLtKeyword_0_0() { return cMINLtKeyword_0_0; }
		
		//MAX='&gt;?'
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_1() { return cMAXEnumLiteralDeclaration_1; }
		
		//'&gt;?'
		public Keyword getMAXGtKeyword_1_0() { return cMAXGtKeyword_1_0; }
	}
	public class BitShiftOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.BitShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLtLtKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTGtGtKeyword_1_0 = (Keyword)cRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BitShiftOperator returns expressions::BitShiftOperator:
		//	LEFT='&lt;&lt;' | RIGHT='&gt;&gt;';
		public EnumRule getRule() { return rule; }
		
		//LEFT='&lt;&lt;' | RIGHT='&gt;&gt;'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT='&lt;&lt;'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }
		
		//'&lt;&lt;'
		public Keyword getLEFTLtLtKeyword_0_0() { return cLEFTLtLtKeyword_0_0; }
		
		//RIGHT='&gt;&gt;'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_1() { return cRIGHTEnumLiteralDeclaration_1; }
		
		//'&gt;&gt;'
		public Keyword getRIGHTGtGtKeyword_1_0() { return cRIGHTGtGtKeyword_1_0; }
	}
	public class RatioOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.RatioOperator");
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDIVIDEColonKeyword_0 = (Keyword)cDIVIDEEnumLiteralDeclaration.eContents().get(0);
		
		//enum RatioOperator returns expressions::ArithmeticOperator:
		//	DIVIDE=':';
		public EnumRule getRule() { return rule; }
		
		//DIVIDE=':'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration() { return cDIVIDEEnumLiteralDeclaration; }
		
		//':'
		public Keyword getDIVIDEColonKeyword_0() { return cDIVIDEColonKeyword_0; }
	}
	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator returns expressions::ArithmeticOperator:
		//	ADD='+' | SUBTRACT='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUBTRACT='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBTRACT='-'
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLICATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLICATEAsteriskKeyword_0_0 = (Keyword)cMULTIPLICATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODULOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODULOPercentSignKeyword_2_0 = (Keyword)cMODULOEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator returns expressions::ArithmeticOperator:
		//	MULTIPLICATE='*' | DIVIDE='/' | MODULO='%';
		public EnumRule getRule() { return rule; }
		
		//MULTIPLICATE='*' | DIVIDE='/' | MODULO='%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIPLICATE='*'
		public EnumLiteralDeclaration getMULTIPLICATEEnumLiteralDeclaration_0() { return cMULTIPLICATEEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULTIPLICATEAsteriskKeyword_0_0() { return cMULTIPLICATEAsteriskKeyword_0_0; }
		
		//DIVIDE='/'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }
		
		//MODULO='%'
		public EnumLiteralDeclaration getMODULOEnumLiteralDeclaration_2() { return cMODULOEnumLiteralDeclaration_2; }
		
		//'%'
		public Keyword getMODULOPercentSignKeyword_2_0() { return cMODULOPercentSignKeyword_2_0; }
	}
	public class IncrementDecrementOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.IncrementDecrementOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCREMENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCREMENTPlusSignPlusSignKeyword_0_0 = (Keyword)cINCREMENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECREMENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECREMENTHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cDECREMENTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IncrementDecrementOperator returns expressions::IncrementDecrementOperator:
		//	INCREMENT='++' | DECREMENT='--';
		public EnumRule getRule() { return rule; }
		
		//INCREMENT='++' | DECREMENT='--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INCREMENT='++'
		public EnumLiteralDeclaration getINCREMENTEnumLiteralDeclaration_0() { return cINCREMENTEnumLiteralDeclaration_0; }
		
		//'++'
		public Keyword getINCREMENTPlusSignPlusSignKeyword_0_0() { return cINCREMENTPlusSignPlusSignKeyword_0_0; }
		
		//DECREMENT='--'
		public EnumLiteralDeclaration getDECREMENTEnumLiteralDeclaration_1() { return cDECREMENTEnumLiteralDeclaration_1; }
		
		//'--'
		public Keyword getDECREMENTHyphenMinusHyphenMinusKeyword_1_0() { return cDECREMENTHyphenMinusHyphenMinusKeyword_1_0; }
	}
	
	private final NSTAElements pNSTA;
	private final TerminalRule tQUERIES;
	private final TerminalRule tINT_STR;
	private final TerminalRule tDOUBLE_STR;
	private final TerminalRule tSTRING;
	private final XmlAttributeElements pXmlAttribute;
	private final GlobalDeclarationsElements pGlobalDeclarations;
	private final SystemDeclarationsElements pSystemDeclarations;
	private final LocalDeclarationsElements pLocalDeclarations;
	private final LocalNonXmlDeclarationsElements pLocalNonXmlDeclarations;
	private final DeclarationElements pDeclaration;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final FunctionElements pFunction;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ParamVariableDeclarationElements pParamVariableDeclaration;
	private final ParamRefVariableDeclarationElements pParamRefVariableDeclaration;
	private final ChannelVariableDeclarationElements pChannelVariableDeclaration;
	private final ParamChannelVariableDeclarationElements pParamChannelVariableDeclaration;
	private final ParamRefChannelVariableDeclarationElements pParamRefChannelVariableDeclaration;
	private final ClockVariableDeclarationElements pClockVariableDeclaration;
	private final ParamClockVariableDeclarationElements pParamClockVariableDeclaration;
	private final ParamRefClockVariableDeclarationElements pParamRefClockVariableDeclaration;
	private final DataVariablePrefixElements eDataVariablePrefix;
	private final DataVariableDeclarationElements pDataVariableDeclaration;
	private final ParamDataVariableDeclarationElements pParamDataVariableDeclaration;
	private final ParamRefDataVariableDeclarationElements pParamRefDataVariableDeclaration;
	private final TypeDeclarationElements pTypeDeclaration;
	private final CallByValueElements eCallByValue;
	private final CallByReferenceElements eCallByReference;
	private final ParameterElements pParameter;
	private final VariableElements pVariable;
	private final IndexElements pIndex;
	private final ValueIndexElements pValueIndex;
	private final TypeIndexElements pTypeIndex;
	private final InitializerElements pInitializer;
	private final ExpressionInitializerElements pExpressionInitializer;
	private final ArrayInitializerElements pArrayInitializer;
	private final TemplateDeclarationElements pTemplateDeclaration;
	private final SystemElements pSystem;
	private final InstantiationListElements pInstantiationList;
	private final ProgressMeasureElements pProgressMeasure;
	private final ChannelPriorityElements pChannelPriority;
	private final ChannelPriorityItemElements pChannelPriorityItem;
	private final ChannelListElements pChannelList;
	private final DefaultChannelPriorityElements pDefaultChannelPriority;
	private final TemplateElements pTemplate;
	private final RedefinedTemplateElements pRedefinedTemplate;
	private final LocationKindElements eLocationKind;
	private final LocationElements pLocation;
	private final BranchPointElements pBranchPoint;
	private final NLocationElements pNLocation;
	private final ELocationElements pELocation;
	private final EdgeElements pEdge;
	private final NEdgeElements pNEdge;
	private final CEdgeElements pCEdge;
	private final SynchronizationElements pSynchronization;
	private final SynchronizationKindElements eSynchronizationKind;
	private final SelectionElements pSelection;
	private final PointElements pPoint;
	private final ColorKindElements eColorKind;
	private final DeclaredTypeElements pDeclaredType;
	private final TypeDefinitionElements pTypeDefinition;
	private final TypeReferenceElements pTypeReference;
	private final ScalarTypeSpecificationElements pScalarTypeSpecification;
	private final StructTypeSpecificationElements pStructTypeSpecification;
	private final RangeTypeSpecificationElements pRangeTypeSpecification;
	private final IntegerBoundsElements pIntegerBounds;
	private final TerminalRule tCLOCK;
	private final ClockTypeReferenceElements pClockTypeReference;
	private final TerminalRule tCHAN;
	private final ChannelTypeReferenceElements pChannelTypeReference;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final EmptyStatementElements pEmptyStatement;
	private final ForLoopElements pForLoop;
	private final IterationElements pIteration;
	private final WhileLoopElements pWhileLoop;
	private final DoWhileLoopElements pDoWhileLoop;
	private final IfStatementElements pIfStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ExpressionStatementElements pExpressionStatement;
	private final ExpressionElements pExpression;
	private final QuantificationExpressionRElements pQuantificationExpressionR;
	private final QuantifierElements eQuantifier;
	private final QuantificationExpressionElements pQuantificationExpression;
	private final AssignmentOperatorElements eAssignmentOperator;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final ConditionExpressionElements pConditionExpression;
	private final LogicalOrImpliesOperatorElements eLogicalOrImpliesOperator;
	private final LogicalOrImpliesExpressionElements pLogicalOrImpliesExpression;
	private final LogicalAndOperatorElements eLogicalAndOperator;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final BitwiseOrOperatorElements eBitwiseOrOperator;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final BitwiseXorOperatorElements eBitwiseXorOperator;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final BitwiseAndOperatorElements eBitwiseAndOperator;
	private final AndExpressionElements pAndExpression;
	private final EqualityOperatorElements eEqualityOperator;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalOperatorElements eRelationalOperator;
	private final RelationalExpressionElements pRelationalExpression;
	private final MinMaxOperatorElements eMinMaxOperator;
	private final MinMaxExpressionElements pMinMaxExpression;
	private final BitShiftOperatorElements eBitShiftOperator;
	private final BitShiftExpressionElements pBitShiftExpression;
	private final RatioOperatorElements eRatioOperator;
	private final RatioExpressionElements pRatioExpression;
	private final AdditiveOperatorElements eAdditiveOperator;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeOperatorElements eMultiplicativeOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final NegationExpressionElements pNegationExpression;
	private final PlusExpressionElements pPlusExpression;
	private final MinusExpressionElements pMinusExpression;
	private final PostfixExpressionElements pPostfixExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final FunctionCallExpressionElements pFunctionCallExpression;
	private final IdentifierExpressionElements pIdentifierExpression;
	private final IncrementDecrementOperatorElements eIncrementDecrementOperator;
	private final PreIncrementDecrementExpressionElements pPreIncrementDecrementExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UppaalSMCGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNSTA = new NSTAElements();
		this.tQUERIES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.QUERIES");
		this.tINT_STR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.INT_STR");
		this.tDOUBLE_STR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.DOUBLE_STR");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.STRING");
		this.pXmlAttribute = new XmlAttributeElements();
		this.pGlobalDeclarations = new GlobalDeclarationsElements();
		this.pSystemDeclarations = new SystemDeclarationsElements();
		this.pLocalDeclarations = new LocalDeclarationsElements();
		this.pLocalNonXmlDeclarations = new LocalNonXmlDeclarationsElements();
		this.pDeclaration = new DeclarationElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pFunction = new FunctionElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pParamVariableDeclaration = new ParamVariableDeclarationElements();
		this.pParamRefVariableDeclaration = new ParamRefVariableDeclarationElements();
		this.pChannelVariableDeclaration = new ChannelVariableDeclarationElements();
		this.pParamChannelVariableDeclaration = new ParamChannelVariableDeclarationElements();
		this.pParamRefChannelVariableDeclaration = new ParamRefChannelVariableDeclarationElements();
		this.pClockVariableDeclaration = new ClockVariableDeclarationElements();
		this.pParamClockVariableDeclaration = new ParamClockVariableDeclarationElements();
		this.pParamRefClockVariableDeclaration = new ParamRefClockVariableDeclarationElements();
		this.eDataVariablePrefix = new DataVariablePrefixElements();
		this.pDataVariableDeclaration = new DataVariableDeclarationElements();
		this.pParamDataVariableDeclaration = new ParamDataVariableDeclarationElements();
		this.pParamRefDataVariableDeclaration = new ParamRefDataVariableDeclarationElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.eCallByValue = new CallByValueElements();
		this.eCallByReference = new CallByReferenceElements();
		this.pParameter = new ParameterElements();
		this.pVariable = new VariableElements();
		this.pIndex = new IndexElements();
		this.pValueIndex = new ValueIndexElements();
		this.pTypeIndex = new TypeIndexElements();
		this.pInitializer = new InitializerElements();
		this.pExpressionInitializer = new ExpressionInitializerElements();
		this.pArrayInitializer = new ArrayInitializerElements();
		this.pTemplateDeclaration = new TemplateDeclarationElements();
		this.pSystem = new SystemElements();
		this.pInstantiationList = new InstantiationListElements();
		this.pProgressMeasure = new ProgressMeasureElements();
		this.pChannelPriority = new ChannelPriorityElements();
		this.pChannelPriorityItem = new ChannelPriorityItemElements();
		this.pChannelList = new ChannelListElements();
		this.pDefaultChannelPriority = new DefaultChannelPriorityElements();
		this.pTemplate = new TemplateElements();
		this.pRedefinedTemplate = new RedefinedTemplateElements();
		this.eLocationKind = new LocationKindElements();
		this.pLocation = new LocationElements();
		this.pBranchPoint = new BranchPointElements();
		this.pNLocation = new NLocationElements();
		this.pELocation = new ELocationElements();
		this.pEdge = new EdgeElements();
		this.pNEdge = new NEdgeElements();
		this.pCEdge = new CEdgeElements();
		this.pSynchronization = new SynchronizationElements();
		this.eSynchronizationKind = new SynchronizationKindElements();
		this.pSelection = new SelectionElements();
		this.pPoint = new PointElements();
		this.eColorKind = new ColorKindElements();
		this.pDeclaredType = new DeclaredTypeElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pScalarTypeSpecification = new ScalarTypeSpecificationElements();
		this.pStructTypeSpecification = new StructTypeSpecificationElements();
		this.pRangeTypeSpecification = new RangeTypeSpecificationElements();
		this.pIntegerBounds = new IntegerBoundsElements();
		this.tCLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.CLOCK");
		this.pClockTypeReference = new ClockTypeReferenceElements();
		this.tCHAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC.CHAN");
		this.pChannelTypeReference = new ChannelTypeReferenceElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pEmptyStatement = new EmptyStatementElements();
		this.pForLoop = new ForLoopElements();
		this.pIteration = new IterationElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pDoWhileLoop = new DoWhileLoopElements();
		this.pIfStatement = new IfStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pExpression = new ExpressionElements();
		this.pQuantificationExpressionR = new QuantificationExpressionRElements();
		this.eQuantifier = new QuantifierElements();
		this.pQuantificationExpression = new QuantificationExpressionElements();
		this.eAssignmentOperator = new AssignmentOperatorElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pConditionExpression = new ConditionExpressionElements();
		this.eLogicalOrImpliesOperator = new LogicalOrImpliesOperatorElements();
		this.pLogicalOrImpliesExpression = new LogicalOrImpliesExpressionElements();
		this.eLogicalAndOperator = new LogicalAndOperatorElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.eBitwiseOrOperator = new BitwiseOrOperatorElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.eBitwiseXorOperator = new BitwiseXorOperatorElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.eBitwiseAndOperator = new BitwiseAndOperatorElements();
		this.pAndExpression = new AndExpressionElements();
		this.eEqualityOperator = new EqualityOperatorElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.eRelationalOperator = new RelationalOperatorElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.eMinMaxOperator = new MinMaxOperatorElements();
		this.pMinMaxExpression = new MinMaxExpressionElements();
		this.eBitShiftOperator = new BitShiftOperatorElements();
		this.pBitShiftExpression = new BitShiftExpressionElements();
		this.eRatioOperator = new RatioOperatorElements();
		this.pRatioExpression = new RatioExpressionElements();
		this.eAdditiveOperator = new AdditiveOperatorElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.eMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pNegationExpression = new NegationExpressionElements();
		this.pPlusExpression = new PlusExpressionElements();
		this.pMinusExpression = new MinusExpressionElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pFunctionCallExpression = new FunctionCallExpressionElements();
		this.pIdentifierExpression = new IdentifierExpressionElements();
		this.eIncrementDecrementOperator = new IncrementDecrementOperatorElements();
		this.pPreIncrementDecrementExpression = new PreIncrementDecrementExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.utwente.ewi.fmt.uppaalSMC.parser.UppaalSMC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//NSTA:
	//	'<?xml' 'version="1.0"' 'encoding="utf-8"?>'
	//	'<!DOCTYPE' name=ID ID "'-//Uppaal" "Team//DTD" "Flat" "System" "1.1//EN'"
	//	"'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'" '>'
	//	'<nta>'
	//	globalDeclarations=GlobalDeclarations?
	//	template+=Template*
	//	systemDeclarations=SystemDeclarations
	//	QUERIES?
	//	'</nta>';
	public NSTAElements getNSTAAccess() {
		return pNSTA;
	}
	
	public ParserRule getNSTARule() {
		return getNSTAAccess().getRule();
	}
	
	//terminal QUERIES:
	//	'<queries>'->'</queries>';
	public TerminalRule getQUERIESRule() {
		return tQUERIES;
	}
	
	//terminal INT_STR:
	//	'0'..'9'+;
	public TerminalRule getINT_STRRule() {
		return tINT_STR;
	}
	
	//terminal DOUBLE_STR:
	//	INT_STR "." INT_STR;
	public TerminalRule getDOUBLE_STRRule() {
		return tDOUBLE_STR;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//XmlAttribute:
	//	ID ('=' STRING)?;
	public XmlAttributeElements getXmlAttributeAccess() {
		return pXmlAttribute;
	}
	
	public ParserRule getXmlAttributeRule() {
		return getXmlAttributeAccess().getRule();
	}
	
	//GlobalDeclarations declarations::GlobalDeclarations:
	//	{declarations::GlobalDeclarations}
	//	'<declaration>'
	//	declaration+=Declaration*
	//	channelPriority=ChannelPriority?
	//	declaration+=Declaration*
	//	'</declaration>';
	public GlobalDeclarationsElements getGlobalDeclarationsAccess() {
		return pGlobalDeclarations;
	}
	
	public ParserRule getGlobalDeclarationsRule() {
		return getGlobalDeclarationsAccess().getRule();
	}
	
	//SystemDeclarations declarations::SystemDeclarations:
	//	'<system>'
	//	declaration+=Declaration*
	//	system=System
	//	progressMeasure=ProgressMeasure?
	//	'</system>';
	public SystemDeclarationsElements getSystemDeclarationsAccess() {
		return pSystemDeclarations;
	}
	
	public ParserRule getSystemDeclarationsRule() {
		return getSystemDeclarationsAccess().getRule();
	}
	
	//LocalDeclarations declarations::LocalDeclarations:
	//	{declarations::LocalDeclarations}
	//	'<declaration>'
	//	declaration+=Declaration*
	//	'</declaration>';
	public LocalDeclarationsElements getLocalDeclarationsAccess() {
		return pLocalDeclarations;
	}
	
	public ParserRule getLocalDeclarationsRule() {
		return getLocalDeclarationsAccess().getRule();
	}
	
	//LocalNonXmlDeclarations declarations::LocalDeclarations:
	//	{declarations::LocalDeclarations} declaration+=Declaration*;
	public LocalNonXmlDeclarationsElements getLocalNonXmlDeclarationsAccess() {
		return pLocalNonXmlDeclarations;
	}
	
	public ParserRule getLocalNonXmlDeclarationsRule() {
		return getLocalNonXmlDeclarationsAccess().getRule();
	}
	
	//Declaration declarations::Declaration:
	//	FunctionDeclaration | (VariableDeclaration | TypeDeclaration | TemplateDeclaration) ';';
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//FunctionDeclaration declarations::FunctionDeclaration:
	//	function=Function;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//Function declarations::Function:
	//	returnType=TypeDefinition name=ID
	//	'(' (parameter+=Parameter ("," parameter+=Parameter)*)? ')'
	//	block=Block;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//VariableDeclaration declarations::VariableDeclaration:
	//	ChannelVariableDeclaration | ClockVariableDeclaration | DataVariableDeclaration;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//ParamVariableDeclaration declarations::VariableDeclaration:
	//	ParamChannelVariableDeclaration | ParamClockVariableDeclaration | ParamDataVariableDeclaration;
	public ParamVariableDeclarationElements getParamVariableDeclarationAccess() {
		return pParamVariableDeclaration;
	}
	
	public ParserRule getParamVariableDeclarationRule() {
		return getParamVariableDeclarationAccess().getRule();
	}
	
	//ParamRefVariableDeclaration declarations::VariableDeclaration:
	//	ParamRefChannelVariableDeclaration | ParamRefClockVariableDeclaration | ParamRefDataVariableDeclaration;
	public ParamRefVariableDeclarationElements getParamRefVariableDeclarationAccess() {
		return pParamRefVariableDeclaration;
	}
	
	public ParserRule getParamRefVariableDeclarationRule() {
		return getParamRefVariableDeclarationAccess().getRule();
	}
	
	//ChannelVariableDeclaration declarations::ChannelVariableDeclaration:
	//	(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference variable+=Variable (","
	//	variable+=Variable)*;
	public ChannelVariableDeclarationElements getChannelVariableDeclarationAccess() {
		return pChannelVariableDeclaration;
	}
	
	public ParserRule getChannelVariableDeclarationRule() {
		return getChannelVariableDeclarationAccess().getRule();
	}
	
	//ParamChannelVariableDeclaration declarations::ChannelVariableDeclaration:
	//	(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference variable+=Variable;
	public ParamChannelVariableDeclarationElements getParamChannelVariableDeclarationAccess() {
		return pParamChannelVariableDeclaration;
	}
	
	public ParserRule getParamChannelVariableDeclarationRule() {
		return getParamChannelVariableDeclarationAccess().getRule();
	}
	
	//ParamRefChannelVariableDeclaration declarations::ChannelVariableDeclaration:
	//	(urgent?='urgent'? & broadcast?='broadcast'?) typeDefinition=ChannelTypeReference '&amp;' variable+=Variable;
	public ParamRefChannelVariableDeclarationElements getParamRefChannelVariableDeclarationAccess() {
		return pParamRefChannelVariableDeclaration;
	}
	
	public ParserRule getParamRefChannelVariableDeclarationRule() {
		return getParamRefChannelVariableDeclarationAccess().getRule();
	}
	
	//ClockVariableDeclaration declarations::ClockVariableDeclaration:
	//	typeDefinition=ClockTypeReference variable+=Variable ("," variable+=Variable)*;
	public ClockVariableDeclarationElements getClockVariableDeclarationAccess() {
		return pClockVariableDeclaration;
	}
	
	public ParserRule getClockVariableDeclarationRule() {
		return getClockVariableDeclarationAccess().getRule();
	}
	
	//ParamClockVariableDeclaration declarations::ClockVariableDeclaration:
	//	typeDefinition=ClockTypeReference variable+=Variable;
	public ParamClockVariableDeclarationElements getParamClockVariableDeclarationAccess() {
		return pParamClockVariableDeclaration;
	}
	
	public ParserRule getParamClockVariableDeclarationRule() {
		return getParamClockVariableDeclarationAccess().getRule();
	}
	
	//ParamRefClockVariableDeclaration declarations::ClockVariableDeclaration:
	//	typeDefinition=ClockTypeReference '&amp;' variable+=Variable;
	public ParamRefClockVariableDeclarationElements getParamRefClockVariableDeclarationAccess() {
		return pParamRefClockVariableDeclaration;
	}
	
	public ParserRule getParamRefClockVariableDeclarationRule() {
		return getParamRefClockVariableDeclarationAccess().getRule();
	}
	
	//enum DataVariablePrefix returns declarations::DataVariablePrefix:
	//	CONST='const' | META='meta';
	public DataVariablePrefixElements getDataVariablePrefixAccess() {
		return eDataVariablePrefix;
	}
	
	public EnumRule getDataVariablePrefixRule() {
		return getDataVariablePrefixAccess().getRule();
	}
	
	//DataVariableDeclaration declarations::DataVariableDeclaration:
	//	prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition variable+=Variable ("," variable+=Variable)*;
	public DataVariableDeclarationElements getDataVariableDeclarationAccess() {
		return pDataVariableDeclaration;
	}
	
	public ParserRule getDataVariableDeclarationRule() {
		return getDataVariableDeclarationAccess().getRule();
	}
	
	//ParamDataVariableDeclaration declarations::DataVariableDeclaration:
	//	prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition variable+=Variable;
	public ParamDataVariableDeclarationElements getParamDataVariableDeclarationAccess() {
		return pParamDataVariableDeclaration;
	}
	
	public ParserRule getParamDataVariableDeclarationRule() {
		return getParamDataVariableDeclarationAccess().getRule();
	}
	
	//ParamRefDataVariableDeclaration declarations::DataVariableDeclaration:
	//	prefix=DataVariablePrefix? -> typeDefinition=TypeDefinition '&amp;' variable+=Variable;
	public ParamRefDataVariableDeclarationElements getParamRefDataVariableDeclarationAccess() {
		return pParamRefDataVariableDeclaration;
	}
	
	public ParserRule getParamRefDataVariableDeclarationRule() {
		return getParamRefDataVariableDeclarationAccess().getRule();
	}
	
	//TypeDeclaration declarations::TypeDeclaration:
	//	'typedef' typeDefinition=TypeDefinition type+=DeclaredType ("," type+=DeclaredType)*;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//enum CallByValue returns declarations::CallType:
	//	CALL_BY_VALUE;
	public CallByValueElements getCallByValueAccess() {
		return eCallByValue;
	}
	
	public EnumRule getCallByValueRule() {
		return getCallByValueAccess().getRule();
	}
	
	//enum CallByReference returns declarations::CallType:
	//	CALL_BY_REFERENCE;
	public CallByReferenceElements getCallByReferenceAccess() {
		return eCallByReference;
	}
	
	public EnumRule getCallByReferenceRule() {
		return getCallByReferenceAccess().getRule();
	}
	
	//Parameter declarations::Parameter:
	//	variableDeclaration=ParamVariableDeclaration | variableDeclaration=ParamRefVariableDeclaration
	//	callType=CallByReference;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Variable declarations::Variable:
	//	{declarations::Variable} name=ID index+=Index* ('=' initializer=Initializer)?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Index declarations::Index:
	//	ValueIndex | TypeIndex;
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//ValueIndex declarations::ValueIndex:
	//	'[' sizeExpression=Expression ']';
	public ValueIndexElements getValueIndexAccess() {
		return pValueIndex;
	}
	
	public ParserRule getValueIndexRule() {
		return getValueIndexAccess().getRule();
	}
	
	//TypeIndex declarations::TypeIndex:
	//	'[' typeDefinition=TypeDefinition ']';
	public TypeIndexElements getTypeIndexAccess() {
		return pTypeIndex;
	}
	
	public ParserRule getTypeIndexRule() {
		return getTypeIndexAccess().getRule();
	}
	
	//Initializer declarations::Initializer:
	//	ExpressionInitializer | ArrayInitializer;
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//ExpressionInitializer declarations::ExpressionInitializer:
	//	expression=Expression;
	public ExpressionInitializerElements getExpressionInitializerAccess() {
		return pExpressionInitializer;
	}
	
	public ParserRule getExpressionInitializerRule() {
		return getExpressionInitializerAccess().getRule();
	}
	
	//ArrayInitializer declarations::ArrayInitializer:
	//	'{' initializer+=Initializer ("," initializer+=Initializer)* '}';
	public ArrayInitializerElements getArrayInitializerAccess() {
		return pArrayInitializer;
	}
	
	public ParserRule getArrayInitializerRule() {
		return getArrayInitializerAccess().getRule();
	}
	
	//TemplateDeclaration system::TemplateDeclaration:
	//	declaredTemplate=RedefinedTemplate
	//	'(' (argument+=Expression (',' argument+=Expression)*)? ')';
	public TemplateDeclarationElements getTemplateDeclarationAccess() {
		return pTemplateDeclaration;
	}
	
	public ParserRule getTemplateDeclarationRule() {
		return getTemplateDeclarationAccess().getRule();
	}
	
	//System system::System:
	//	'system' instantiationList+=InstantiationList ("&lt;" instantiationList+=InstantiationList)* ';';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//InstantiationList system::InstantiationList:
	//	template+=[templates::AbstractTemplate] ("," template+=[templates::AbstractTemplate])*;
	public InstantiationListElements getInstantiationListAccess() {
		return pInstantiationList;
	}
	
	public ParserRule getInstantiationListRule() {
		return getInstantiationListAccess().getRule();
	}
	
	//ProgressMeasure system::ProgressMeasure:
	//	'progress' '{' (expression+=Expression ";")+ '}';
	public ProgressMeasureElements getProgressMeasureAccess() {
		return pProgressMeasure;
	}
	
	public ParserRule getProgressMeasureRule() {
		return getProgressMeasureAccess().getRule();
	}
	
	//ChannelPriority global::ChannelPriority:
	//	CHAN 'priority' item+=ChannelPriorityItem ("<" item+=ChannelPriorityItem)* ';';
	public ChannelPriorityElements getChannelPriorityAccess() {
		return pChannelPriority;
	}
	
	public ParserRule getChannelPriorityRule() {
		return getChannelPriorityAccess().getRule();
	}
	
	//ChannelPriorityItem global::ChannelPriorityItem:
	//	ChannelList | DefaultChannelPriority;
	public ChannelPriorityItemElements getChannelPriorityItemAccess() {
		return pChannelPriorityItem;
	}
	
	public ParserRule getChannelPriorityItemRule() {
		return getChannelPriorityItemAccess().getRule();
	}
	
	//ChannelList global::ChannelList:
	//	channelExpression+=IdentifierExpression ("," channelExpression+=IdentifierExpression)*;
	public ChannelListElements getChannelListAccess() {
		return pChannelList;
	}
	
	public ParserRule getChannelListRule() {
		return getChannelListAccess().getRule();
	}
	
	//DefaultChannelPriority global::DefaultChannelPriority:
	//	{global::DefaultChannelPriority}
	//	'default';
	public DefaultChannelPriorityElements getDefaultChannelPriorityAccess() {
		return pDefaultChannelPriority;
	}
	
	public ParserRule getDefaultChannelPriorityRule() {
		return getDefaultChannelPriorityAccess().getRule();
	}
	
	//Template templates::Template:
	//	'<template>'
	//	'<name' XmlAttribute* '>' name=ID '</name>' ('<parameter>' parameter+=Parameter ("," parameter+=Parameter)*
	//	'</parameter>')?
	//	declarations=LocalDeclarations?
	//	location+=Location*
	//	'<init' 'ref' '=' init=[templates::Location|STRING] '/>'
	//	edge+=Edge*
	//	'</template>';
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}
	
	//RedefinedTemplate templates::RedefinedTemplate:
	//	name=ID ('(' parameter+=Parameter (',' parameter+=Parameter)* ')')* (':=' | "=")
	//	referredTemplate=[templates::AbstractTemplate];
	public RedefinedTemplateElements getRedefinedTemplateAccess() {
		return pRedefinedTemplate;
	}
	
	public ParserRule getRedefinedTemplateRule() {
		return getRedefinedTemplateAccess().getRule();
	}
	
	//enum LocationKind returns templates::LocationKind:
	//	URGENT='<urgent/>' | COMMITED='<committed/>';
	public LocationKindElements getLocationKindAccess() {
		return eLocationKind;
	}
	
	public EnumRule getLocationKindRule() {
		return getLocationKindAccess().getRule();
	}
	
	//Location templates::Location:
	//	-> ELocation | NLocation | BranchPoint;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//BranchPoint ChanceNode:
	//	('<branchpoint' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))?
	//	'>')
	//	'</branchpoint>';
	public BranchPointElements getBranchPointAccess() {
		return pBranchPoint;
	}
	
	public ParserRule getBranchPointRule() {
		return getBranchPointAccess().getRule();
	}
	
	//NLocation templates::Location:
	//	('<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))?
	//	'>') ('<name' XmlAttribute* '>' comment=ID '</name>')? ('<label' 'kind="invariant"' XmlAttribute* '>'
	//	invariant=Expression
	//	'</label>')?
	//	locationTimeKind=LocationKind?
	//	'</location>';
	public NLocationElements getNLocationAccess() {
		return pNLocation;
	}
	
	public ParserRule getNLocationRule() {
		return getNLocationAccess().getRule();
	}
	
	//ELocation ExponentialLocation:
	//	('<location' (ID '=' name=STRING) position=Point? ('color' '=' (color=ColorKind | colorCode=STRING))?
	//	'>') ('<name' XmlAttribute* '>' comment=ID '</name>')? ('<label' 'kind="invariant"' XmlAttribute* '>'
	//	invariant=Expression
	//	'</label>')?
	//	'<label' -> 'kind="exponentialrate"' XmlAttribute* '>'
	//	exitRate=(RatioExpression | Expression)
	//	'</label>'
	//	locationTimeKind=LocationKind?
	//	'</location>';
	public ELocationElements getELocationAccess() {
		return pELocation;
	}
	
	public ParserRule getELocationRule() {
		return getELocationAccess().getRule();
	}
	
	//Edge templates::Edge:
	//	-> CEdge | NEdge;
	public EdgeElements getEdgeAccess() {
		return pEdge;
	}
	
	public ParserRule getEdgeRule() {
		return getEdgeAccess().getRule();
	}
	
	//NEdge templates::Edge:
	//	('<transition' ('color' '=' (color=ColorKind | colorCode=STRING))?
	//	'>') ('<source' 'ref' '=' source=[templates::Location|STRING] '/>') ('<target' 'ref' '='
	//	target=[templates::Location|STRING] '/>') ('<label' 'kind="select"' XmlAttribute* '>'
	//	selection+=Selection ("," selection+=Selection)*
	//	'</label>')? ('<label' 'kind="guard"' XmlAttribute* '>'
	//	guard=Expression
	//	'</label>')? ('<label' 'kind="synchronisation"' XmlAttribute* '>'
	//	synchronization=Synchronization
	//	'</label>')? ('<label' 'kind="assignment"' XmlAttribute* '>'
	//	update+=Expression ("," update+=Expression)*
	//	'</label>')? ('<nail' bendPoint+=Point '/>')*
	//	//		('comment' comment=EString)?
	//	//		('color' color=ColorKind)?
	//	//		('colorCode' colorCode=EString)?
	//	'</transition>';
	public NEdgeElements getNEdgeAccess() {
		return pNEdge;
	}
	
	public ParserRule getNEdgeRule() {
		return getNEdgeAccess().getRule();
	}
	
	//CEdge ChanceEdge:
	//	('<transition' ('color' '=' (color=ColorKind | colorCode=STRING))?
	//	'>') ('<source' 'ref' '=' source=[templates::Location|STRING] '/>') ('<target' 'ref' '='
	//	target=[templates::Location|STRING] '/>') ('<label' 'kind="select"' XmlAttribute* '>'
	//	selection+=Selection ("," selection+=Selection)*
	//	'</label>')? ('<label' 'kind="guard"' XmlAttribute* '>'
	//	guard=Expression
	//	'</label>')? ('<label' 'kind="synchronisation"' XmlAttribute* '>'
	//	synchronization=Synchronization
	//	'</label>')? ('<label' 'kind="assignment"' XmlAttribute* '>'
	//	update+=Expression ("," update+=Expression)*
	//	'</label>')? ('<label' 'kind="probability"' XmlAttribute* '>'
	//	weight=Expression
	//	'</label>') ('<nail' bendPoint+=Point '/>')*
	//	//		('comment' comment=EString)?
	//	//		('color' color=ColorKind)?
	//	//		('colorCode' colorCode=EString)?
	//	'</transition>';
	public CEdgeElements getCEdgeAccess() {
		return pCEdge;
	}
	
	public ParserRule getCEdgeRule() {
		return getCEdgeAccess().getRule();
	}
	
	//Synchronization templates::Synchronization:
	//	channelExpression=IdentifierExpression kind=SynchronizationKind;
	public SynchronizationElements getSynchronizationAccess() {
		return pSynchronization;
	}
	
	public ParserRule getSynchronizationRule() {
		return getSynchronizationAccess().getRule();
	}
	
	//enum SynchronizationKind returns templates::SynchronizationKind:
	//	RECEIVE='?' | SEND='!';
	public SynchronizationKindElements getSynchronizationKindAccess() {
		return eSynchronizationKind;
	}
	
	public EnumRule getSynchronizationKindRule() {
		return getSynchronizationKindAccess().getRule();
	}
	
	//Selection templates::Selection:
	//	variable+=Variable ':' typeDefinition=TypeDefinition;
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}
	
	//Point visuals::Point:
	//	{visuals::Point} ID '=' STRING
	//	ID '=' STRING;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//enum ColorKind returns visuals::ColorKind:
	//	DEFAULT | WHITE | LIGHTGREY |
	//	DARKGREY | BLACK | BLUE | CYAN |
	//	GREEN | MAGENTA | ORANGE | PINK |
	//	RED | YELLOW | SELF_DEFINED;
	public ColorKindElements getColorKindAccess() {
		return eColorKind;
	}
	
	public EnumRule getColorKindRule() {
		return getColorKindAccess().getRule();
	}
	
	//DeclaredType types::DeclaredType:
	//	{types::DeclaredType} name=ID index+=Index*;
	public DeclaredTypeElements getDeclaredTypeAccess() {
		return pDeclaredType;
	}
	
	public ParserRule getDeclaredTypeRule() {
		return getDeclaredTypeAccess().getRule();
	}
	
	//TypeDefinition types::TypeDefinition:
	//	TypeReference | ScalarTypeSpecification | StructTypeSpecification | RangeTypeSpecification;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//TypeReference types::TypeReference:
	//	referredType=[types::Type];
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//ScalarTypeSpecification types::ScalarTypeSpecification:
	//	'scalar' '[' sizeExpression=Expression ']';
	public ScalarTypeSpecificationElements getScalarTypeSpecificationAccess() {
		return pScalarTypeSpecification;
	}
	
	public ParserRule getScalarTypeSpecificationRule() {
		return getScalarTypeSpecificationAccess().getRule();
	}
	
	////TODO: struct
	//StructTypeSpecification types::StructTypeSpecification:
	//	{types::StructTypeSpecification}
	//	'struct' '{' (declaration+=DataVariableDeclaration ';')* '}';
	public StructTypeSpecificationElements getStructTypeSpecificationAccess() {
		return pStructTypeSpecification;
	}
	
	public ParserRule getStructTypeSpecificationRule() {
		return getStructTypeSpecificationAccess().getRule();
	}
	
	//RangeTypeSpecification types::RangeTypeSpecification:
	//	ID '[' bounds=IntegerBounds ']';
	public RangeTypeSpecificationElements getRangeTypeSpecificationAccess() {
		return pRangeTypeSpecification;
	}
	
	public ParserRule getRangeTypeSpecificationRule() {
		return getRangeTypeSpecificationAccess().getRule();
	}
	
	//IntegerBounds types::IntegerBounds:
	//	lowerBound=Expression ',' upperBound=Expression;
	public IntegerBoundsElements getIntegerBoundsAccess() {
		return pIntegerBounds;
	}
	
	public ParserRule getIntegerBoundsRule() {
		return getIntegerBoundsAccess().getRule();
	}
	
	//terminal CLOCK:
	//	"clock";
	public TerminalRule getCLOCKRule() {
		return tCLOCK;
	}
	
	//ClockTypeReference types::TypeReference:
	//	referredType=[types::Type|CLOCK];
	public ClockTypeReferenceElements getClockTypeReferenceAccess() {
		return pClockTypeReference;
	}
	
	public ParserRule getClockTypeReferenceRule() {
		return getClockTypeReferenceAccess().getRule();
	}
	
	//terminal CHAN:
	//	"chan";
	public TerminalRule getCHANRule() {
		return tCHAN;
	}
	
	//ChannelTypeReference types::TypeReference:
	//	referredType=[types::Type|CHAN];
	public ChannelTypeReferenceElements getChannelTypeReferenceAccess() {
		return pChannelTypeReference;
	}
	
	public ParserRule getChannelTypeReferenceRule() {
		return getChannelTypeReferenceAccess().getRule();
	}
	
	//Block statements::Block:
	//	'{' declarations=LocalNonXmlDeclarations
	//	statement+=Statement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement statements::Statement:
	//	Block | EmptyStatement | ForLoop | Iteration | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement |
	//	ExpressionStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//EmptyStatement statements::EmptyStatement:
	//	{statements::EmptyStatement}
	//	';';
	public EmptyStatementElements getEmptyStatementAccess() {
		return pEmptyStatement;
	}
	
	public ParserRule getEmptyStatementRule() {
		return getEmptyStatementAccess().getRule();
	}
	
	//ForLoop statements::ForLoop:
	//	'for' '(' initialization=Expression ';' condition=Expression ';' iteration=Expression ')'
	//	statement=Statement;
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//Iteration statements::Iteration:
	//	'for' '(' variable+=Variable ':' typeDefinition=TypeDefinition ')' statement=Statement;
	public IterationElements getIterationAccess() {
		return pIteration;
	}
	
	public ParserRule getIterationRule() {
		return getIterationAccess().getRule();
	}
	
	//WhileLoop statements::WhileLoop:
	//	'while' '(' expression=Expression ')' statement=Statement;
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//DoWhileLoop statements::DoWhileLoop:
	//	'do' statement=Statement 'while' '(' expression=Expression ')';
	public DoWhileLoopElements getDoWhileLoopAccess() {
		return pDoWhileLoop;
	}
	
	public ParserRule getDoWhileLoopRule() {
		return getDoWhileLoopAccess().getRule();
	}
	
	//IfStatement statements::IfStatement:
	//	'if' '(' ifExpression=Expression ')' thenStatement=Statement (=> 'else' elseStatement=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ReturnStatement statements::ReturnStatement:
	//	{statements::ReturnStatement}
	//	'return' returnExpression=Expression? ';';
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ExpressionStatement statements::ExpressionStatement:
	//	expression=Expression ';';
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//Expression expressions::Expression:
	//	QuantificationExpressionR;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//QuantificationExpressionR expressions::Expression:
	//	AssignmentExpression | QuantificationExpression;
	public QuantificationExpressionRElements getQuantificationExpressionRAccess() {
		return pQuantificationExpressionR;
	}
	
	public ParserRule getQuantificationExpressionRRule() {
		return getQuantificationExpressionRAccess().getRule();
	}
	
	//enum Quantifier returns expressions::Quantifier:
	//	EXISTENTIAL='exists' | UNIVERSAL='forall';
	public QuantifierElements getQuantifierAccess() {
		return eQuantifier;
	}
	
	public EnumRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}
	
	//// TODO: SUM?
	//QuantificationExpression expressions::QuantificationExpression:
	//	quantifier=Quantifier '(' variable+=Variable ':' typeDefinition=TypeDefinition ')' expression=Expression;
	public QuantificationExpressionElements getQuantificationExpressionAccess() {
		return pQuantificationExpression;
	}
	
	public ParserRule getQuantificationExpressionRule() {
		return getQuantificationExpressionAccess().getRule();
	}
	
	//enum AssignmentOperator returns expressions::AssignmentOperator:
	//	EQUAL='=' | EQUAL=':=' | PLUS_EQUAL='+=' | MINUS_EQUAL='-=' |
	//	TIMES_EQUAL='*=' | DIVIDE_EQUAL='/=' | MODULO_EQUAL='%=' |
	//	BIT_AND_EQUAL='&amp;=' | BIT_OR_EQUAL='|=' | BIT_LEFT_EQUAL='&lt;&lt;=' |
	//	BIT_RIGHT_EQUAL='&gt;&gt;=' | BIT_XOR_EQUAL='^=';
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return eAssignmentOperator;
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//AssignmentExpression expressions::Expression:
	//	ConditionExpression ({expressions::AssignmentExpression.firstExpr=current} operator=AssignmentOperator
	//	secondExpr=AssignmentExpression)?;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//ConditionExpression expressions::Expression:
	//	LogicalOrImpliesExpression ({expressions::ConditionExpression.ifExpression=current}
	//	'?' thenExpression=Expression => ':' elseExpression=ConditionExpression)?;
	public ConditionExpressionElements getConditionExpressionAccess() {
		return pConditionExpression;
	}
	
	public ParserRule getConditionExpressionRule() {
		return getConditionExpressionAccess().getRule();
	}
	
	//enum LogicalOrImpliesOperator returns expressions::LogicalOperator:
	//	OR='or' | OR='||' | IMPLY='imply';
	public LogicalOrImpliesOperatorElements getLogicalOrImpliesOperatorAccess() {
		return eLogicalOrImpliesOperator;
	}
	
	public EnumRule getLogicalOrImpliesOperatorRule() {
		return getLogicalOrImpliesOperatorAccess().getRule();
	}
	
	//LogicalOrImpliesExpression expressions::Expression:
	//	LogicalAndExpression ({expressions::LogicalExpression.firstExpr=current} operator=LogicalOrImpliesOperator
	//	secondExpr=LogicalAndExpression)*;
	public LogicalOrImpliesExpressionElements getLogicalOrImpliesExpressionAccess() {
		return pLogicalOrImpliesExpression;
	}
	
	public ParserRule getLogicalOrImpliesExpressionRule() {
		return getLogicalOrImpliesExpressionAccess().getRule();
	}
	
	//enum LogicalAndOperator returns expressions::LogicalOperator:
	//	AND='and' | AND='&amp;&amp;';
	public LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return eLogicalAndOperator;
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//LogicalAndExpression expressions::Expression:
	//	InclusiveOrExpression ({expressions::LogicalExpression.firstExpr=current} operator=LogicalAndOperator
	//	secondExpr=InclusiveOrExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns expressions::BitwiseOperator:
	//	OR='|';
	public BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return eBitwiseOrOperator;
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//InclusiveOrExpression expressions::Expression:
	//	ExclusiveOrExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseOrOperator
	//	secondExpr=ExclusiveOrExpression)*;
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//enum BitwiseXorOperator returns expressions::BitwiseOperator:
	//	XOR='^';
	public BitwiseXorOperatorElements getBitwiseXorOperatorAccess() {
		return eBitwiseXorOperator;
	}
	
	public EnumRule getBitwiseXorOperatorRule() {
		return getBitwiseXorOperatorAccess().getRule();
	}
	
	//ExclusiveOrExpression expressions::Expression:
	//	AndExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseXorOperator
	//	secondExpr=AndExpression)*;
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns expressions::BitwiseOperator:
	//	AND='&amp;';
	public BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return eBitwiseAndOperator;
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//AndExpression expressions::Expression:
	//	EqualityExpression ({expressions::BitwiseExpression.firstExpr=current} operator=BitwiseAndOperator
	//	secondExpr=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//enum EqualityOperator returns expressions::CompareOperator:
	//	EQUAL='==' | UNEQUAL='!=';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return eEqualityOperator;
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//EqualityExpression expressions::Expression:
	//	RelationalExpression ({expressions::CompareExpression.firstExpr=current} operator=EqualityOperator
	//	secondExpr=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//enum RelationalOperator returns expressions::CompareOperator:
	//	GREATER='&gt;' | GREATER_OR_EQUAL='&gt;=' |
	//	LESS='&lt;' | LESS_OR_EQUAL='&lt;=';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return eRelationalOperator;
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//RelationalExpression expressions::Expression:
	//	MinMaxExpression ({expressions::CompareExpression.firstExpr=current} operator=RelationalOperator
	//	secondExpr=MinMaxExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//enum MinMaxOperator returns expressions::MinMaxOperator:
	//	MIN='&lt;?' | MAX='&gt;?';
	public MinMaxOperatorElements getMinMaxOperatorAccess() {
		return eMinMaxOperator;
	}
	
	public EnumRule getMinMaxOperatorRule() {
		return getMinMaxOperatorAccess().getRule();
	}
	
	//MinMaxExpression expressions::Expression:
	//	BitShiftExpression ({expressions::MinMaxExpression.firstExpr=current} operator=MinMaxOperator
	//	secondExpr=BitShiftExpression)*;
	public MinMaxExpressionElements getMinMaxExpressionAccess() {
		return pMinMaxExpression;
	}
	
	public ParserRule getMinMaxExpressionRule() {
		return getMinMaxExpressionAccess().getRule();
	}
	
	//enum BitShiftOperator returns expressions::BitShiftOperator:
	//	LEFT='&lt;&lt;' | RIGHT='&gt;&gt;';
	public BitShiftOperatorElements getBitShiftOperatorAccess() {
		return eBitShiftOperator;
	}
	
	public EnumRule getBitShiftOperatorRule() {
		return getBitShiftOperatorAccess().getRule();
	}
	
	//BitShiftExpression expressions::Expression:
	//	AdditiveExpression ({expressions::BitShiftExpression.firstExpr=current} operator=BitShiftOperator
	//	secondExpr=AdditiveExpression)*;
	public BitShiftExpressionElements getBitShiftExpressionAccess() {
		return pBitShiftExpression;
	}
	
	public ParserRule getBitShiftExpressionRule() {
		return getBitShiftExpressionAccess().getRule();
	}
	
	//enum RatioOperator returns expressions::ArithmeticOperator:
	//	DIVIDE=':';
	public RatioOperatorElements getRatioOperatorAccess() {
		return eRatioOperator;
	}
	
	public EnumRule getRatioOperatorRule() {
		return getRatioOperatorAccess().getRule();
	}
	
	//RatioExpression expressions::ArithmeticExpression:
	//	firstExpr=AdditiveExpression operator=RatioOperator secondExpr=AdditiveExpression;
	public RatioExpressionElements getRatioExpressionAccess() {
		return pRatioExpression;
	}
	
	public ParserRule getRatioExpressionRule() {
		return getRatioExpressionAccess().getRule();
	}
	
	//enum AdditiveOperator returns expressions::ArithmeticOperator:
	//	ADD='+' | SUBTRACT='-';
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return eAdditiveOperator;
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//AdditiveExpression expressions::Expression:
	//	MultiplicativeExpression ({expressions::ArithmeticExpression.firstExpr=current} operator=AdditiveOperator
	//	secondExpr=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//enum MultiplicativeOperator returns expressions::ArithmeticOperator:
	//	MULTIPLICATE='*' | DIVIDE='/' | MODULO='%';
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return eMultiplicativeOperator;
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression expressions::Expression:
	//	UnaryExpression ({expressions::ArithmeticExpression.firstExpr=current} operator=MultiplicativeOperator
	//	secondExpr=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//UnaryExpression expressions::Expression:
	//	NegationExpression | PlusExpression | MinusExpression | PostfixExpression | PreIncrementDecrementExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//NegationExpression expressions::NegationExpression:
	//	('!' | 'not') negatedExpression=UnaryExpression;
	public NegationExpressionElements getNegationExpressionAccess() {
		return pNegationExpression;
	}
	
	public ParserRule getNegationExpressionRule() {
		return getNegationExpressionAccess().getRule();
	}
	
	//PlusExpression expressions::PlusExpression:
	//	'+' confirmedExpression=UnaryExpression;
	public PlusExpressionElements getPlusExpressionAccess() {
		return pPlusExpression;
	}
	
	public ParserRule getPlusExpressionRule() {
		return getPlusExpressionAccess().getRule();
	}
	
	//MinusExpression expressions::MinusExpression:
	//	'-' invertedExpression=UnaryExpression;
	public MinusExpressionElements getMinusExpressionAccess() {
		return pMinusExpression;
	}
	
	public ParserRule getMinusExpressionRule() {
		return getMinusExpressionAccess().getRule();
	}
	
	//PostfixExpression expressions::Expression:
	//	PrimaryExpression ({expressions::ScopedIdentifierExpression.scope=current}
	//	'.' identifier=IdentifierExpression | {expressions::PostIncrementDecrementExpression.expression=current}
	//	operator=IncrementDecrementOperator)*;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//PrimaryExpression expressions::Expression:
	//	=> FunctionCallExpression | IdentifierExpression | '(' Expression ')' | {expressions::LiteralExpression} text=(STRING
	//	| INT_STR | DOUBLE_STR | "true" | "false");
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//FunctionCallExpression expressions::FunctionCallExpression:
	//	function=[declarations::Function]
	//	'(' (argument+=Expression ("," argument+=Expression)*)? ')';
	public FunctionCallExpressionElements getFunctionCallExpressionAccess() {
		return pFunctionCallExpression;
	}
	
	public ParserRule getFunctionCallExpressionRule() {
		return getFunctionCallExpressionAccess().getRule();
	}
	
	//IdentifierExpression expressions::IdentifierExpression:
	//	identifier=[core::NamedElement] clockRate?="'"? ('[' index+=Expression ("]" "[" index+=Expression)* ']')?;
	public IdentifierExpressionElements getIdentifierExpressionAccess() {
		return pIdentifierExpression;
	}
	
	public ParserRule getIdentifierExpressionRule() {
		return getIdentifierExpressionAccess().getRule();
	}
	
	//enum IncrementDecrementOperator returns expressions::IncrementDecrementOperator:
	//	INCREMENT='++' | DECREMENT='--';
	public IncrementDecrementOperatorElements getIncrementDecrementOperatorAccess() {
		return eIncrementDecrementOperator;
	}
	
	public EnumRule getIncrementDecrementOperatorRule() {
		return getIncrementDecrementOperatorAccess().getRule();
	}
	
	//PreIncrementDecrementExpression expressions::PreIncrementDecrementExpression:
	//	operator=IncrementDecrementOperator expression=UnaryExpression;
	public PreIncrementDecrementExpressionElements getPreIncrementDecrementExpressionAccess() {
		return pPreIncrementDecrementExpression;
	}
	
	public ParserRule getPreIncrementDecrementExpressionRule() {
		return getPreIncrementDecrementExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
