grammar nl.utwente.ewi.fmt.uppaalsmc.parser.UppaalSMC with org.eclipse.xtext.common.Terminals

import "platform:/resource/nl.utwente.ewi.fmt.uppaalsmc/model/uppaalSMC.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//core" as core
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//types" as types
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//declarations" as declarations
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//declarations/global" as global
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//declarations/system" as system
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//templates" as templates
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//statements" as statements
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//expressions" as expressions
import "platform:/resource/org.muml.uppaal/model/uppaal.ecore#//visuals" as visuals

NSTA returns NSTA:
	'<?xml' 'version="1.0"' 'encoding="utf-8"?>'
	'<!DOCTYPE' name=ID ID "'-//Uppaal" "Team//DTD" "Flat" "System" "1.1//EN'" "'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'" '>'
	'<nta>'
		(globalDeclarations=GlobalDeclarations)?
		(template+=Template)*
		systemDeclarations=SystemDeclarations
		QUERIES?
	'</nta>';

terminal QUERIES	: '<queries>' -> '</queries>';
terminal INT_STR: ('0'..'9')+;
terminal DOUBLE_STR: INT_STR "." INT_STR;
@Override
terminal STRING	: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'; 
XmlAttribute:
	ID ('=' STRING)?;
GlobalDeclarations returns declarations::GlobalDeclarations:
	{declarations::GlobalDeclarations}
	'<declaration>'
		(declaration+=Declaration)*
		(channelPriority=ChannelPriority)?
		(declaration+=Declaration)*
	'</declaration>';

SystemDeclarations returns declarations::SystemDeclarations:
	'<system>'
		(declaration+=Declaration)*
		system=System
		(progressMeasure=ProgressMeasure)?
	'</system>';

LocalDeclarations returns declarations::LocalDeclarations:
	{declarations::LocalDeclarations}
	'<declaration>'
		(declaration+=Declaration)*
	'</declaration>';

LocalNonXmlDeclarations returns declarations::LocalDeclarations:
	{declarations::LocalDeclarations}
	(declaration+=Declaration)*;
	
Declaration returns declarations::Declaration:
	FunctionDeclaration | ((VariableDeclaration | TypeDeclaration | TemplateDeclaration) ';');
	
FunctionDeclaration returns declarations::FunctionDeclaration:
	function=Function;
	
Function returns declarations::Function:
	returnType=TypeDefinition name=ID
	'(' (parameter+=Parameter ("," parameter+=Parameter)*)? ')'
	block=Block;
	
VariableDeclaration returns declarations::VariableDeclaration:
	ChannelVariableDeclaration | ClockVariableDeclaration | DataVariableDeclaration;
ParamVariableDeclaration returns declarations::VariableDeclaration:
	ParamChannelVariableDeclaration | ParamClockVariableDeclaration | ParamDataVariableDeclaration;
ParamRefVariableDeclaration returns declarations::VariableDeclaration:
	ParamRefChannelVariableDeclaration | ParamRefClockVariableDeclaration | ParamRefDataVariableDeclaration;
	
ChannelVariableDeclaration returns declarations::ChannelVariableDeclaration:
	((urgent?='urgent')? & (broadcast?='broadcast')?)
	typeDefinition=ChannelTypeReference variable+=Variable ( "," variable+=Variable)*;
ParamChannelVariableDeclaration returns declarations::ChannelVariableDeclaration:
	((urgent?='urgent')? & (broadcast?='broadcast')?)
	typeDefinition=ChannelTypeReference variable+=Variable;
ParamRefChannelVariableDeclaration returns declarations::ChannelVariableDeclaration:
	((urgent?='urgent')? & (broadcast?='broadcast')?)
	typeDefinition=ChannelTypeReference '&amp;' variable+=Variable;

ClockVariableDeclaration returns declarations::ClockVariableDeclaration:
	typeDefinition=ClockTypeReference variable+=Variable ( "," variable+=Variable)*;
ParamClockVariableDeclaration returns declarations::ClockVariableDeclaration:
	typeDefinition=ClockTypeReference variable+=Variable;
ParamRefClockVariableDeclaration returns declarations::ClockVariableDeclaration:
	typeDefinition=ClockTypeReference '&amp;' variable+=Variable;


enum DataVariablePrefix returns declarations::DataVariablePrefix:
				CONST = 'const' | META = 'meta';
DataVariableDeclaration returns declarations::DataVariableDeclaration:
	(prefix=DataVariablePrefix)? ->typeDefinition=TypeDefinition variable+=Variable ( "," variable+=Variable)*;
ParamDataVariableDeclaration returns declarations::DataVariableDeclaration:
	(prefix=DataVariablePrefix)? ->typeDefinition=TypeDefinition variable+=Variable;
ParamRefDataVariableDeclaration returns declarations::DataVariableDeclaration:
	(prefix=DataVariablePrefix)? ->typeDefinition=TypeDefinition '&amp;' variable+=Variable ;

TypeDeclaration returns declarations::TypeDeclaration:
	'typedef' typeDefinition=TypeDefinition type+=DeclaredType ( "," type+=DeclaredType)*;

enum CallByValue returns declarations::CallType:
	CALL_BY_VALUE;
enum CallByReference returns declarations::CallType:
	CALL_BY_REFERENCE;
Parameter returns declarations::Parameter:
	variableDeclaration=ParamVariableDeclaration | 
	(variableDeclaration=ParamRefVariableDeclaration callType=CallByReference);

Variable returns declarations::Variable:
	{declarations::Variable}
	name=ID (index+=Index)* ('=' initializer=Initializer)?;
	
Index returns declarations::Index:
	ValueIndex | TypeIndex;
ValueIndex returns declarations::ValueIndex:
	'[' sizeExpression=Expression']';
TypeIndex returns declarations::TypeIndex:
	'[' typeDefinition=TypeDefinition ']';

Initializer returns declarations::Initializer:
	ExpressionInitializer | ArrayInitializer;
ExpressionInitializer returns declarations::ExpressionInitializer:
	expression=Expression;
ArrayInitializer returns declarations::ArrayInitializer:
	'{' initializer+=Initializer ( "," initializer+=Initializer)* '}';

TemplateDeclaration returns system::TemplateDeclaration:
	declaredTemplate=RedefinedTemplate 
	'(' (argument+=Expression (',' argument+=Expression)*)? ')';

System returns system::System:
	'system' instantiationList+=InstantiationList ("&lt;" instantiationList+=InstantiationList)* ';';
InstantiationList returns system::InstantiationList:
	template+=[templates::AbstractTemplate|ID] ( "," template+=[templates::AbstractTemplate|ID])*;
ProgressMeasure returns system::ProgressMeasure:
	'progress' '{' (expression+=Expression ";" )+ '}';
	
ChannelPriority returns global::ChannelPriority:
	CHAN 'priority' item+=ChannelPriorityItem ( "<" item+=ChannelPriorityItem)* ';';
ChannelPriorityItem returns global::ChannelPriorityItem:
	ChannelList | DefaultChannelPriority;
ChannelList returns global::ChannelList:
	channelExpression+=IdentifierExpression ( "," channelExpression+=IdentifierExpression)*;
DefaultChannelPriority returns global::DefaultChannelPriority:
	{global::DefaultChannelPriority}
	'default';

Template returns templates::Template:
	'<template>'
		'<name' XmlAttribute* '>' name=ID '</name>'
		('<parameter>' parameter+=Parameter ( "," parameter+=Parameter)* '</parameter>' )?
		(declarations=LocalDeclarations)?
		(location+=Location)*
		'<init' 'ref' '=' init=[templates::Location|STRING] '/>'
		(edge+=Edge)*
	'</template>';
RedefinedTemplate returns templates::RedefinedTemplate:
	name=ID ('(' parameter+=Parameter (',' parameter+=Parameter)* ')')*
	(':=' | "=") referredTemplate=[templates::AbstractTemplate|ID];

enum LocationKind returns templates::LocationKind:
				URGENT = '<urgent/>' | COMMITED = '<committed/>';
Location returns templates::Location:
	->ELocation | NLocation | BranchPoint;

BranchPoint returns ChanceNode:
	('<branchpoint' 
			(ID '=' name=STRING)
			(position=Point)?
			('color' '=' ((color=ColorKind) | colorCode=STRING))?
			'>')
	'</branchpoint>';

NLocation returns templates::Location:
	('<location' 
			(ID '='  name=STRING)
			(position=Point)?
			('color' '=' ((color=ColorKind) | colorCode=STRING))?
			'>')
		('<name' XmlAttribute* '>' comment=ID '</name>')?
		('<label' 'kind="invariant"' XmlAttribute* '>'
			invariant=Expression
		'</label>')?
		(locationTimeKind=LocationKind)?
	'</location>';

ELocation returns ExponentialLocation:
	('<location' 
			(ID '=' name=STRING)
			(position=Point)?
			('color' '=' ((color=ColorKind) | colorCode=STRING))?
			'>')
		('<name' XmlAttribute* '>' comment=ID '</name>')?
		('<label' 'kind="invariant"' XmlAttribute* '>'
			invariant=Expression
		'</label>')?
		'<label' ->'kind="exponentialrate"' XmlAttribute* '>'
			exitRate=(RatioExpression | Expression)
		'</label>'
		(locationTimeKind=LocationKind)?
	'</location>';

Edge returns templates::Edge:
	->CEdge | NEdge;

NEdge returns templates::Edge:
	('<transition'
			('color' '=' ((color=ColorKind) | colorCode=STRING))?
		'>')
		('<source' 'ref' '=' source=[templates::Location|STRING] '/>')
		('<target' 'ref' '=' target=[templates::Location|STRING] '/>')
		('<label' 'kind="select"' XmlAttribute* '>'
			selection+=Selection ( "," selection+=Selection)*
		'</label>')?
		('<label' 'kind="guard"' XmlAttribute* '>'
			guard=Expression
		'</label>')?
		('<label' 'kind="synchronisation"' XmlAttribute* '>'
			synchronization=Synchronization
		'</label>')?
		('<label' 'kind="assignment"' XmlAttribute* '>'
			update+=Expression ( "," update+=Expression)*
		'</label>')?
		('<nail' bendPoint+=Point '/>')*
//		('comment' comment=EString)?
//		('color' color=ColorKind)?
//		('colorCode' colorCode=EString)?
	'</transition>';

CEdge returns ChanceEdge:
	('<transition'
			('color' '=' ((color=ColorKind) | colorCode=STRING))?
		'>')
		('<source' 'ref' '=' source=[templates::Location|STRING] '/>')
		('<target' 'ref' '=' target=[templates::Location|STRING] '/>')
		('<label' 'kind="select"' XmlAttribute* '>'
			selection+=Selection ( "," selection+=Selection)*
		'</label>')?
		('<label' 'kind="guard"' XmlAttribute* '>'
			guard=Expression
		'</label>')?
		('<label' 'kind="synchronisation"' XmlAttribute* '>'
			synchronization=Synchronization
		'</label>')?
		('<label' 'kind="assignment"' XmlAttribute* '>'
			update+=Expression ( "," update+=Expression)*
		'</label>')?
		('<label' 'kind="probability"' XmlAttribute* '>'
			weight=Expression
		'</label>')
		('<nail' bendPoint+=Point '/>')*
//		('comment' comment=EString)?
//		('color' color=ColorKind)?
//		('colorCode' colorCode=EString)?
	'</transition>';
	
Synchronization returns templates::Synchronization:
	channelExpression=IdentifierExpression kind=SynchronizationKind;
enum SynchronizationKind returns templates::SynchronizationKind:
				RECEIVE = '?' | SEND = '!';

Selection returns templates::Selection:
	variable+=Variable ':' typeDefinition=TypeDefinition;

Point returns visuals::Point:
	{visuals::Point}
		ID '=' STRING
		ID '=' STRING;

enum ColorKind returns visuals::ColorKind:
				DEFAULT = 'DEFAULT' | WHITE = 'WHITE' | LIGHTGREY = 'LIGHTGREY' | 
				DARKGREY = 'DARKGREY' | BLACK = 'BLACK' | BLUE = 'BLUE' | CYAN = 'CYAN' | 
				GREEN = 'GREEN' | MAGENTA = 'MAGENTA' | ORANGE = 'ORANGE' | PINK = 'PINK' | 
				RED = 'RED' | YELLOW = 'YELLOW' | SELF_DEFINED = 'SELF_DEFINED';
DeclaredType returns types::DeclaredType:
	{types::DeclaredType}
	name=ID (index+=Index)*;
	
TypeDefinition returns types::TypeDefinition:
	TypeReference | ScalarTypeSpecification | StructTypeSpecification | RangeTypeSpecification;

TypeReference returns types::TypeReference:
	referredType=[types::Type|ID];
	
ScalarTypeSpecification returns types::ScalarTypeSpecification:
	'scalar' '[' sizeExpression=Expression ']';
	
//TODO: struct
StructTypeSpecification returns types::StructTypeSpecification:
	{types::StructTypeSpecification}
	'struct' '{' (declaration+=DataVariableDeclaration ';')* '}';
	
RangeTypeSpecification returns types::RangeTypeSpecification:
	ID '[' bounds=IntegerBounds ']';
IntegerBounds returns types::IntegerBounds:
	lowerBound=Expression ',' upperBound=Expression;

terminal CLOCK : "clock";
ClockTypeReference returns types::TypeReference:
	referredType=[types::Type|CLOCK];
terminal CHAN : "chan";
ChannelTypeReference returns types::TypeReference:
	referredType=[types::Type|CHAN];
	
Block returns statements::Block:
	'{' declarations=LocalNonXmlDeclarations
	(statement+=Statement)* '}';

Statement returns statements::Statement:
	Block | EmptyStatement | ForLoop | Iteration | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement | ExpressionStatement;
EmptyStatement returns statements::EmptyStatement:
	{statements::EmptyStatement}
	';';
ForLoop returns statements::ForLoop:
	'for' '(' initialization=Expression ';' condition=Expression ';' iteration=Expression ')'
		statement=Statement;
Iteration returns statements::Iteration:
	'for' '(' variable+=Variable ':' typeDefinition=TypeDefinition ')' statement=Statement;
WhileLoop returns statements::WhileLoop:
	'while' '(' expression=Expression ')' statement=Statement;
DoWhileLoop returns statements::DoWhileLoop:
	'do' statement=Statement 'while' '(' expression=Expression ')';
IfStatement returns statements::IfStatement:
	'if' '(' ifExpression=Expression ')' thenStatement=Statement
	(=>'else' elseStatement=Statement)?;
ReturnStatement returns statements::ReturnStatement:
	{statements::ReturnStatement}
	'return' (returnExpression=Expression)? ';';
ExpressionStatement returns statements::ExpressionStatement:
	expression=Expression ';';
	
Expression returns expressions::Expression:
	QuantificationExpressionR;

QuantificationExpressionR returns expressions::Expression:
	AssignmentExpression | QuantificationExpression;
enum Quantifier returns expressions::Quantifier:
			EXISTENTIAL = 'exists' | UNIVERSAL = 'forall'; // TODO: SUM?
QuantificationExpression returns expressions::QuantificationExpression:
	quantifier=Quantifier '(' variable+=Variable ':' typeDefinition=TypeDefinition')' expression=Expression;
	

enum AssignmentOperator returns expressions::AssignmentOperator:
	EQUAL = '=' | EQUAL = ':=' | PLUS_EQUAL = '+=' | MINUS_EQUAL = '-=' |
	TIMES_EQUAL = '*=' | DIVIDE_EQUAL = '/=' | MODULO_EQUAL = '%=' |
	BIT_AND_EQUAL = '&amp;=' | BIT_OR_EQUAL = '|=' | BIT_LEFT_EQUAL = '&lt;&lt;=' |
	BIT_RIGHT_EQUAL = '&gt;&gt;=' | BIT_XOR_EQUAL = '^=';
AssignmentExpression returns expressions::Expression:
	ConditionExpression ({expressions::AssignmentExpression.firstExpr=current}
		operator=AssignmentOperator secondExpr=AssignmentExpression)?;
		
ConditionExpression returns expressions::Expression:
	LogicalOrImpliesExpression ({expressions::ConditionExpression.ifExpression=current}
		'?' thenExpression=Expression =>':' elseExpression=ConditionExpression)?;
		
enum LogicalOrImpliesOperator returns expressions::LogicalOperator:
				OR = 'or' | OR = '||' | IMPLY = 'imply';
LogicalOrImpliesExpression returns expressions::Expression:
	LogicalAndExpression ({expressions::LogicalExpression.firstExpr=current}
		operator=LogicalOrImpliesOperator secondExpr=LogicalAndExpression)*;
enum LogicalAndOperator returns expressions::LogicalOperator:
				AND = 'and' | AND = '&amp;&amp;';
LogicalAndExpression returns expressions::Expression:
	InclusiveOrExpression ({expressions::LogicalExpression.firstExpr=current}
		operator=LogicalAndOperator secondExpr=InclusiveOrExpression)*;
		
enum BitwiseOrOperator returns expressions::BitwiseOperator:
				OR = '|';
InclusiveOrExpression returns expressions::Expression:
	ExclusiveOrExpression ({expressions::BitwiseExpression.firstExpr=current}
		operator=BitwiseOrOperator secondExpr=ExclusiveOrExpression)*;
enum BitwiseXorOperator returns expressions::BitwiseOperator:
				XOR = '^';
ExclusiveOrExpression returns expressions::Expression:
	AndExpression ({expressions::BitwiseExpression.firstExpr=current}
		operator=BitwiseXorOperator secondExpr=AndExpression)*;
enum BitwiseAndOperator returns expressions::BitwiseOperator:
				AND = '&amp;';
AndExpression returns expressions::Expression:
	EqualityExpression ({expressions::BitwiseExpression.firstExpr=current}
		operator=BitwiseAndOperator secondExpr=EqualityExpression)*;
		
enum EqualityOperator returns expressions::CompareOperator:
				EQUAL = '==' | UNEQUAL = '!=';
EqualityExpression returns expressions::Expression:
	RelationalExpression ({expressions::CompareExpression.firstExpr=current}
		operator=EqualityOperator secondExpr=RelationalExpression)*;
		
enum RelationalOperator returns expressions::CompareOperator:
				GREATER = '&gt;' | GREATER_OR_EQUAL = '&gt;=' | 
				LESS = '&lt;' | LESS_OR_EQUAL = '&lt;=';
RelationalExpression returns expressions::Expression:
	MinMaxExpression ({expressions::CompareExpression.firstExpr=current}
		operator=RelationalOperator secondExpr=MinMaxExpression)*;

enum MinMaxOperator returns expressions::MinMaxOperator:
				MIN = '&lt;?' | MAX = '&gt;?';
MinMaxExpression returns expressions::Expression:
	BitShiftExpression ({expressions::MinMaxExpression.firstExpr=current}
		operator=MinMaxOperator secondExpr=BitShiftExpression)*;
		
enum BitShiftOperator returns expressions::BitShiftOperator:
				LEFT = '&lt;&lt;' | RIGHT = '&gt;&gt;';
BitShiftExpression returns expressions::Expression:
	AdditiveExpression ({expressions::BitShiftExpression.firstExpr=current}
		operator=BitShiftOperator secondExpr=AdditiveExpression)*;

enum RatioOperator returns expressions::ArithmeticOperator:
			DIVIDE = ':';
RatioExpression returns expressions::ArithmeticExpression:
	firstExpr=AdditiveExpression operator=RatioOperator secondExpr=AdditiveExpression;

enum AdditiveOperator returns expressions::ArithmeticOperator:
			ADD = '+' | SUBTRACT = '-';
AdditiveExpression returns expressions::Expression:
	MultiplicativeExpression ({expressions::ArithmeticExpression.firstExpr=current}
		operator=AdditiveOperator secondExpr=MultiplicativeExpression)*;
		
enum MultiplicativeOperator returns expressions::ArithmeticOperator:
			MULTIPLICATE = '*' | DIVIDE = '/' | MODULO = '%';
MultiplicativeExpression returns expressions::Expression:
	UnaryExpression ({expressions::ArithmeticExpression.firstExpr=current}
		operator=MultiplicativeOperator secondExpr=UnaryExpression)*;


UnaryExpression returns expressions::Expression:
	NegationExpression | PlusExpression | MinusExpression | 
	PostfixExpression | PreIncrementDecrementExpression;

NegationExpression returns expressions::NegationExpression:
	('!' | 'not') negatedExpression=UnaryExpression;
PlusExpression returns expressions::PlusExpression:
	'+' confirmedExpression=UnaryExpression;
MinusExpression returns expressions::MinusExpression:
	'-' invertedExpression=UnaryExpression;

PostfixExpression returns expressions::Expression:
	(PrimaryExpression
		(
			({expressions::ScopedIdentifierExpression.scope=current}
			'.' identifier=IdentifierExpression) |
			({expressions::PostIncrementDecrementExpression.expression=current}
			operator=IncrementDecrementOperator)
		)*
	);
	
		
PrimaryExpression returns expressions::Expression:
	=>FunctionCallExpression | IdentifierExpression | ('(' Expression ')') |
	({expressions::LiteralExpression} text=(STRING | INT_STR | DOUBLE_STR | "true" | "false"));
	
FunctionCallExpression returns expressions::FunctionCallExpression:
	function=[declarations::Function|ID]
		'(' (argument+=Expression ( "," argument+=Expression)
			*
		)? ')';

IdentifierExpression returns expressions::IdentifierExpression:
	identifier=[core::NamedElement|ID] (clockRate?="'")?
		('[' index+=Expression ( "]" "[" index+=Expression)* ']' )?;

enum IncrementDecrementOperator returns expressions::IncrementDecrementOperator:
				INCREMENT = '++' | DECREMENT = '--';
PreIncrementDecrementExpression returns expressions::PreIncrementDecrementExpression:
	operator=IncrementDecrementOperator expression=UnaryExpression;
