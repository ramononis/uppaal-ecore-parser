/**
 * generated by Xtext 2.16.0
 */
package nl.utwente.ewi.fmt.uppaalSMC.parser.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import nl.utwente.ewi.fmt.uppaalSMC.NSTA;
import nl.utwente.ewi.fmt.uppaalSMC.parser.services.UppaalSMCGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.muml.uppaal.declarations.Declaration;
import org.muml.uppaal.declarations.GlobalDeclarations;
import org.muml.uppaal.declarations.SystemDeclarations;
import org.muml.uppaal.declarations.global.ChannelPriority;
import org.muml.uppaal.templates.Template;

@SuppressWarnings("all")
public class UppaalSMCFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private UppaalSMCGrammarAccess _uppaalSMCGrammarAccess;
  
  protected void _format(final NSTA nSTA, @Extension final IFormattableDocument document) {
    document.<GlobalDeclarations>format(nSTA.getGlobalDeclarations());
    EList<Template> _template = nSTA.getTemplate();
    for (final Template template : _template) {
      document.<Template>format(template);
    }
    document.<SystemDeclarations>format(nSTA.getSystemDeclarations());
  }
  
  protected void _format(final GlobalDeclarations globalDeclarations, @Extension final IFormattableDocument document) {
    EList<Declaration> _declaration = globalDeclarations.getDeclaration();
    for (final Declaration declaration : _declaration) {
      document.<Declaration>format(declaration);
    }
    document.<ChannelPriority>format(globalDeclarations.getChannelPriority());
  }
  
  public void format(final Object nSTA, final IFormattableDocument document) {
    if (nSTA instanceof NSTA) {
      _format((NSTA)nSTA, document);
      return;
    } else if (nSTA instanceof XtextResource) {
      _format((XtextResource)nSTA, document);
      return;
    } else if (nSTA instanceof GlobalDeclarations) {
      _format((GlobalDeclarations)nSTA, document);
      return;
    } else if (nSTA instanceof EObject) {
      _format((EObject)nSTA, document);
      return;
    } else if (nSTA == null) {
      _format((Void)null, document);
      return;
    } else if (nSTA != null) {
      _format(nSTA, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(nSTA, document).toString());
    }
  }
}
